<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Transforming an electric meter (Linky) to an IoT device</title>
    <link href="/2021/03/04/Transforming-an-electric-meter-Linky-to-an-IoT-device/"/>
    <url>/2021/03/04/Transforming-an-electric-meter-Linky-to-an-IoT-device/</url>
    
    <content type="html"><![CDATA[<h1 id="Transforming-an-electric-meter-Linky-to-an-IoT-device"><a href="#Transforming-an-electric-meter-Linky-to-an-IoT-device" class="headerlink" title="Transforming an electric meter (Linky) to an IoT device"></a>Transforming an electric meter (Linky) to an IoT device</h1><p>I want to show you one of my biggest projects, which I made for my last year of my “higher national diploma” (BTS in French). It consisted into creating a connected electric meter using the ‘Linky’ which is a smart meter deployed by Enedis. It is installed almost everywhere in France now.</p><p>In my team we where almost four students (depends on the point of view).<br>The mayor of a city with about 5500 people asked us to create a system he could deploy on some of the Linky’s in his city. And he wanted to be able to see the consumption in real time of each of these electric meters on a webpage and a mobile application.<br><img src="https://i.imgur.com/DPmChBE.png" alt="Test system"></p><p>I’m gonna use the pictures I put in my report, but I cannot put everything in one article because it has about 69 pages… sorry.</p><p><img src="https://i.imgur.com/P54FVT5.jpg" alt="Global datagram"></p><h2 id="Used-equipment"><a href="#Used-equipment" class="headerlink" title="Used equipment"></a>Used equipment</h2><p>A certain material was imposed on us for our project.</p><ul><li>A development board which is capable of UART (serial) communication</li><li>A LoRa antenna, because we had to use the LoRa protocol</li><li>A web server</li><li>A LoRa Gateway</li></ul><p>Some of the Linky electric meters and a TIC (Télé-Information Client) were also provided to us to make some tests.</p><p>To get some informationsI had sent on the USB serial port of the Raspberry Pi.<br>This can be done with PuTTY (<code>sudo apt install putty</code>). With PuTTY we can communicate with a serial port. In my case I used ttyS0 which was the USB port. And the baudrate was 9600 bauds.to connect the TIC to L1 and L   2 (picture below).<br><img src="https://i.imgur.com/SQ1ZlwW.png" alt="Teleinformation outputs Linky"></p><h2 id="The-LoRa-protocol-and-network"><a href="#The-LoRa-protocol-and-network" class="headerlink" title="The LoRa protocol and network"></a>The LoRa protocol and network</h2><p><a href="https://www.semtech.com/lora">LoRa</a> is a Low power protocol with a high range, also called a LPWAN (Low Power Wide-Area Network) but a low bandwidth. This means that less data can be transmitted at once, but it is transmitted way further.<br>As the 4G network (<a href="https://w01f.xyz/2021/01/03/How-a-mobile-network-is-connected-to-the-Internet/">I explained here</a> how this works), LoRa need an antenna to send data and some gateways which are directly connected to the internet to collect this data and send it… somewhere..</p><p>Usually on TheThingsNetwork (TTN).</p><p>Range and bandwidth comparison with other technologies.<br><img src="https://i.imgur.com/HGek1mM.png" alt="Lora diagram"></p><p><code>Note: Sigfox can be an alternative to LoRa</code></p><p><a href="https://www.sigfox.com/en">Sigfox</a></p><p>The LoRa technology uses 868MHz for the communication between a device and a gateway, and Internet to connect the gateway to the internet. The strong point of this technology is its low power consumption and its ability to penetrate walls, and it can also be used under ground.</p><h2 id="Labor-division"><a href="#Labor-division" class="headerlink" title="Labor division"></a>Labor division</h2><p>This project has been parted into four parts :</p><ul><li>Collecting the data sent by the Linky, process it, send it to TTN and store it into a database and make it available using a Rest API</li><li>Collecting the data from the database and make it available on the website (backend web development)</li><li>Creating the website (front-end web development) and manage the webserver</li><li>Creating a mobile app to display the data on a mobile device</li></ul><p>Initially I only had to to the first part, but I finished my job pretty early so… I also did the three other parts, for fun..</p><h2 id="UML-amp-Diagrams"><a href="#UML-amp-Diagrams" class="headerlink" title="UML &amp; Diagrams"></a>UML &amp; Diagrams</h2><p>Here are some UML diagrams someone in my group draw, and they are pretty nice.</p><p>Deployment Diagram<br><img src="https://i.imgur.com/7tSLKTx.png" alt="deployment diagram"></p><p>Use Case Diagram<br><img src="https://i.imgur.com/TI0esrs.png" alt="Use Case Diagram"></p><p>Sequence Diagram<br><img src="https://i.imgur.com/BPxToXC.png" alt="Sequence Diagram"></p><h2 id="Collect-process-and-send-the-consumption-data"><a href="#Collect-process-and-send-the-consumption-data" class="headerlink" title="Collect process and send the consumption data"></a>Collect process and send the consumption data</h2><p>The first step was to collect the power consumption data using the serial connections from the Linky and read this data with a python program on a Raspberry Pi.<br>The TIC is only useful to convert the outgoing data from L1 &amp; L2 into USB data.</p><p>The TIC, connected to a three phase Linky and to the Raspberry Pi :<br><img src="https://i.imgur.com/tJGjY3z.png" alt="TIC teleinformation three phase linky"></p><p>The contacts are not the same on a single phase electric meter and a three phase electric meter.<br>Luckily I have both at home, so I was able to compare them.<br><img src="https://i.imgur.com/6G0ZYJC.png" alt="Comparison single phase and three phase"></p><p>The cable you see on the three phase Linky was connected to the TIC, which is connected via USB to the Raspberry Pi. (A Raspberry Pi is like a micro computer)<br>I connected a Lora module to the GPIO pins of the Raspberry Pi. I used the LoraWAN module from Atim (ARM-N8-LRW). It was hard as hell to find out how to configure it with the gateway, and link the gateway to TTN… but I’m still alive, so.. It was not that terrible.</p><p>Here you can see my Raspberry Pi equiped with the LoRa hat, and connected to the Linky via USB.</p><p><img src="https://i.imgur.com/CqaBZLq.png" alt="Raspberry Pi with Atim LoRa module hat"></p><p>Once the TIC was connected to the Raspberry Pi, I was able to check if some interesting information were sent on the USB serial port of the Raspberry Pi.<br>This can be done with PuTTY (<code>sudo apt install putty</code>). With PuTTY we can communicate with a serial port. In my case I used ttyUSB0 which was the USB port. And the speed was 9600 bauds.</p><p><img src="https://i.imgur.com/wsxtFNh.png" alt="Putty config for serial port"></p><p>Yes it’s /dev/tty0 on the screen, but it just depends on the serial port you use.</p><p><code>Note: The Linky has two different operation modes :</code></p><ul><li>Historic mode (1200 bauds) doesn’t send the time with the power consumption</li><li>Standard mode (9600 bauds) sends the time with the power consumption</li></ul><p>And the sent data is not exactly formatted in the same way…</p><p>Also, the single phase Linky doesn’t send the same information than the three phase Linky, indeed the latter also gives us the power consumption for each phase.</p><p>I used three different Linky meters, and one of them was in historic mode, it was a little bit confusing at the beginning but I just had to change the baudrate and process the data otherwise.</p><p>Here is the raw data the Linky sent to the Raspberry Pi.<br><img src="https://i.imgur.com/v6wipZN.png" alt="raw serial data from linky"><br>This data is sent continuously on L1 and L2.</p><p>Luckily the Linky is well documented on this point, and it’s pretty easy to see what each piece of information corresponds to.</p><p>I only had to send the <strong>identification number</strong> of the electric meter, the <strong>date</strong>, the <strong>total power consumption</strong> and the <strong>live power consumption</strong>.</p><p>Here are these main information and their ‘identifier’ :</p><ul><li><strong>ADSC</strong>: electric meter ID</li><li><strong>DATE</strong>: date</li><li><strong>EAST</strong>: total power consumption</li><li><strong>SINSTS</strong>: real time power consumption</li></ul><p>This first part was pretty easy. Now I knew what I had to collect I was able to create my Python script.</p><p>I used Python because it is incredibly easy to work with serial ports with it. Here is my code, firstly i’m only listening for the data and displaying int in a terminal.</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-keyword">import</span> serial <span class="hljs-comment">#To use serial ports</span> ser = serial.Serial( port=<span class="hljs-string">&#x27;/dev/ttyUSB0&#x27;</span>,  baudrate = <span class="hljs-number">1200</span>,  parity=serial.PARITY_EVEN,  stopbits=serial.STOPBITS_ONE,  bytesize=serial.SEVENBITS,  timeout=<span class="hljs-number">1</span>)  counter=<span class="hljs-number">0</span> timeout = time.time() + <span class="hljs-number">3</span>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :     <span class="hljs-keyword">if</span> time.time() &gt; timeout:         <span class="hljs-keyword">break</span>     x = ser.readline()    data_str = (str(x))  <span class="hljs-keyword">print</span> (data)  ser.close() <span class="hljs-comment"># close serial</span></code></pre><p>This is what I got using my script :<br><img src="https://i.imgur.com/4Ie8vbq.png" alt="Terminal output of serial data using python"></p><p>Now I had to parse all this data, in order to do that I used some Regex ().</p><p>Here’s an example using <a href="https://regex101.com/">Regex 101</a> :<br><img src="https://i.imgur.com/FHatzwN.png" alt="Regex example"></p><p>SINSTS is our power consumption in real time (here you can see it was 0Wh).<br>With regex I tell the computer that I want all the data between the green and the orange highlighted stuff, so only the red highlighted information.<br>Also, you can see that the red highlighted information is in Group 2, this will be useful in my Python script.</p><p>Here’s how to retrieve this data in Python :</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-comment"># Here I put the regular expression I use</span>regex = <span class="hljs-string">r&quot;(SINSTS\\t)(.*.)(\\t,*.*)&quot;</span><span class="hljs-comment"># test_str in a single part of the raw data from the Linky</span>test_str = <span class="hljs-string">&quot;b&#x27;SINSTS\\t00000\\tF\\r\\n&#x27;&quot;</span><span class="hljs-comment"># checking for matches in the raw data, which matches the regular expression</span>matches = re.finditer(regex, test_str, re.MULTILINE)<span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>):    groupNum = <span class="hljs-number">2</span> <span class="hljs-comment"># Our group N°2 !!</span>    datalive = (<span class="hljs-string">&quot;&#123;group&#125;&quot;</span>.format(group = match.group(groupNum)))    <span class="hljs-comment"># Now I can print each group 2 data that was found in the raw data using the regular expression</span>    print(datalive)</code></pre><p>Are here’s the result :<br><img src="https://i.imgur.com/lFf5kPq.png" alt="Regex script result"></p><p>Now I had to do this for each information I needed.<br>So I did this:</p><pre><code class="hljs python">reg_conso_live = <span class="hljs-string">r&quot;PAPP ([0-9][0-9]+)&quot;</span><span class="hljs-comment"># If not in standart mode use the line below</span> <span class="hljs-comment">#reg_date = r&quot;(DATE\\t)(([eEhH])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9]))(\\t\\t,*.*)&quot;</span> reg_conso_tot = <span class="hljs-string">r&quot;BASE ([0-9][0-9]+)&quot;</span>  reg_id = <span class="hljs-string">r&quot;ADCO ([0-9]*)&quot;</span>  matches = re.finditer(reg_id, data_str, re.MULTILINE)  <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>): groupNum = <span class="hljs-number">1</span>  dataid = (<span class="hljs-string">&quot;&#123;group&#125;-&quot;</span>.format(group = match.group(groupNum)))  matches = re.finditer(reg_conso_live, data_str, re.MULTILINE) <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>): groupNum = <span class="hljs-number">1</span> datalive = (<span class="hljs-string">&quot;&#123;group&#125;-&quot;</span>.format(group = match.group(groupNum))) matches = re.finditer(reg_conso_tot, data_str, re.MULTILINE)  <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>): groupNum = <span class="hljs-number">1</span> datatot = (<span class="hljs-string">&quot;&#123;group&#125;&quot;</span>.format(group = match.group(groupNum))) data = dataid + datalive + datatot  <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Données: &quot;</span> + data)</code></pre><p>The output of this code:</p><p><img src="https://i.imgur.com/vWub7S6.png" alt="Python all data regex"></p><p>Once this was done, I had to sent all this information to The Things Network (TTN).</p><p>Before I coded something, I had to verify if I can communicate with the Atim LoRa module. To do this, AT commands are used. It also uses a serial port to communicate, so I just used PuTTY again.<br>The module was connected on <strong>/dev/tty0</strong> (GPIO) with a baudrate of 19200.<br>This is how I configured PuTTY :</p><p><strong><code>But I had some problems with /dev/tty0 (You&#39;ll see it later), and had to use /dev/ttyAMA0</code> just remember to try both</strong></p><p><img src="https://i.imgur.com/KH1zjRg.png" alt="PuTTY configuration AT commands"></p><p>This will open a new terminal, you’ll have to send ‘+++’ in it.<br>At the beginning I tried it several times, changing the baudrate, the serial port but it didn’t work.</p><p>This is <strong>IMPORTANT</strong>, my LoRa module needed to be powered on GPIO 7 to power on the module.<br>Everytime I used the commands </p><p><code>gpio mode 7 OUT</code></p><p><code>gpio write 7 1</code> </p><p>The GPIO pin returned to IN…</p><p><img src="https://i.imgur.com/rfqJRwc.png" alt="GPIO7 OUT to IN"></p><p>This took me days to solve. The <strong>solution</strong> (I think, I’m not absolutely sure) was to export the GPIO pins at the Raspberry Pi’s startup using the rc.local file.</p><p><img src="https://i.imgur.com/zUKAR0v.png" alt="Export GPIO in rc.local file"></p><p>This forced GPIO 7 to stay as IN.</p><p>Once this was done I was able to send ‘+++’ into the terminal.<br><img src="https://i.imgur.com/slKGAUd.png" alt="AT command confirmation PuTTY"></p><p>And I was able to enter some AT commands, such as :</p><ul><li><strong>ATM002=14</strong> -&gt; <em>LED blinks when data is send</em></li><li><strong>ATO077=22</strong> -&gt; <em>Set frequency to 868.5 MHz</em></li><li><strong>AT$SF=XX</strong> -&gt; <em>Send XX as payload</em></li></ul><p>Now I was able to send data with my Raspberry Pi. But I had to intercept this data using a Gateway and send it to TTN.</p><p>This is the gateway I used <a href="https://www.nemeus.fr/product/indoor-gateway/">Nemeus Gateway LoRa</a></p><p>Probably not the best choice, but it worked not that bad, once it worked.<br>Some parameters I used :<br><img src="https://i.imgur.com/NY3sNG8.png" alt="Nemeus gateway parameters"></p><p>I connected the Gateway to the TTN server :<br><img src="https://i.imgur.com/7F6dOJx.png" alt="Nemeus gateway The Things Network connection"></p><p>And finally I registered my Atim LoRa module on the Gateway :<br><img src="https://i.imgur.com/zK7QWzM.png" alt="Device list Nemeus"></p><p>When the Gateway was connected to the internet it didn’t work because of some firewalls and proxies, but once it worked I saw the Gateway connected on TTN :<br><img src="https://i.imgur.com/RqVaAsc.png" alt="Gateway connected on TTN"></p><p>On The Things Network I had to create a new ‘Application’ and add a device to it. Take care that you enter the correct keys that come with the LoRa module (Atim).</p><p>Now everything should be configured to receive some data.</p><p>This looks pretty easy but that was the part where I have killed myself a few times.</p><p>To send some data I use the AT command ‘<strong>AT$SF=AABB</strong>‘ (AABB is my payload in Hexadecimal).<br><img src="https://i.imgur.com/NhqJgQ4.png" alt="Atim documentation AT commands"></p><p>Now was another problem.</p><p>When I sent the data with that AT command, the LoRa module blinked which means that the data has been sent correctly. But TTN displayed only some ‘join request’ (yellow lightning).</p><p><img src="https://i.imgur.com/rh6G06s.png" alt="Join requests TTN"></p><p>This means that my module asked TTN if it can send some data, but TTN didn’t respond.</p><p>I did all my tests on the <code>tty0</code> serial port, but I had to use <code>tty AMA0</code>.</p><blockquote><p>I changed that in the <code>/boot/config.txt</code> file by adding <code>dtoverlay=pi3- disable-bt</code> to disable bluetooth which was on the port I used.<br>And I also did the <code>sudo systemctl disable hciuart</code> command.</p></blockquote><p>But all this didn’t work either.</p><p>So I decided to reset my LoRa module to the factory default settings.</p><p>This can be done with the <strong>ATF</strong> AT command.</p><p>I also changed ABP to OTAA. (Change this in TTN as well)<br>Here are some other AT commands I did :</p><ul><li><strong>ATM002=14</strong> -&gt; Turn LED ON when data is send</li><li><strong>ATO083=0B</strong> -&gt; Set OTAA</li><li><strong>ATO075=11</strong> -&gt; Use SF11</li><li><strong>ATO076=01</strong> -&gt; Set Signal strenght to 14 dbm</li><li><strong>ATO077=22</strong> -&gt; Set frequency to 868500 Hz </li><li><strong>ATO086=F4</strong> -&gt; Use a 4 time speed factor</li></ul><p>Changing these settings may mean that they also have to be changed in the Gateway settings, check that they are the same.</p><p>To save your configuration enter the <code>ATOS</code> command.</p><p>Then restart the module by changing GPIO 7 to 0 and then to 1.</p><p><code>gpio write 7 0</code></p><p><code>gpio write 7 1</code></p><p>After several configuration tests (that took me to the above setup), I finally got some new information on TTN.</p><p>To view the entire configuration of the Atim LoRa module you can enter the following commands :</p><ul><li>ATLO</li><li>ATLM</li></ul><p>I give you my configuration, because this one worked for me :<br><img src="https://i.imgur.com/HKG8b1W.png" alt="Atim config ATLO"><br><img src="https://i.imgur.com/o4GoWVt.png" alt="Atim config ATLM"></p><p>Now I (FINALLY) got some ‘Join Accept’ responses !<br>(The green lightnings)</p><p><img src="https://i.imgur.com/Rrc31Pw.png" alt="Join accept responses TTN"></p><p>This is what happened han I sent some data using <code>AT$SF=...</code> :<br><img src="https://i.imgur.com/u6NqklN.png" alt="TTN application data receiving"></p><p>Before the first ‘Activation’ data appears in Application Data, about four acknowledgements are made between the LoRa module and TTN. Which are a ‘join request’ and a ‘join accept’.</p><p>When I plugged an electric heater on the Linky, that was about 2000W, I was able to see its live consumption using my python script.<br><img src="https://i.imgur.com/5gK4S1u.png" alt="Live power consumption using a heater"></p><p>It was time to write the third and final part of my Python script.<br>This part was like the first one, but instead of listening and receiving data, this one sends the processed data to the LoRa module.</p><pre><code class="hljs python">sera = serial.Serial( <span class="hljs-comment"># New serial connection</span> port=<span class="hljs-string">&#x27;/dev/ttyAMA0&#x27;</span>, <span class="hljs-comment"># This time I used the ttyAMA0 port</span> baudrate = <span class="hljs-number">19200</span>, <span class="hljs-comment"># Using 19200 bauds as speed</span> ) sera.write(data.encode()) <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Done.&quot;</span>) sera.close() <span class="hljs-comment"># Closing serial connection</span></code></pre><p> Now I have the three main steps of my python code :</p><ul><li><p>Retrieving data</p></li><li><p>Processing data</p></li><li><p>Sending data</p><p>For some power saving raisons I added a 1hour timer to this code.<br><img src="https://i.imgur.com/JumupLP.png" alt="Program diagram"></p><p>I then created a function called ‘read_send’ and put parts of my code in it, added a timer and some lines of code :</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">import</span> time <span class="hljs-comment">#Pour faire des pauses dans le programme et utiliser le temps</span><span class="hljs-keyword">import</span> serial <span class="hljs-comment">#Pour utiliser les ports série</span><span class="hljs-keyword">import</span> re <span class="hljs-comment">#Pour utiliser les expressions régulières (regex)</span>serza = serial.Serial( <span class="hljs-comment">#Je crée une nouvelle connexion série</span>    port=<span class="hljs-string">&#x27;/dev/ttyAMA0&#x27;</span>, <span class="hljs-comment">#J&#x27;utilise le port AMA0 pour envoyer les données cette fois-ci</span>    baudrate = <span class="hljs-number">19200</span>, <span class="hljs-comment">#Je définis la vitesse de transmission à 19200, car le module LoRa utilise ce baud pour communiquer</span>    )serza.write(<span class="hljs-string">b&#x27;RpI connecte Pret a envoyer&#x27;</span>) <span class="hljs-comment">#J&#x27;envoie les données sur le port série, et je les encode en bytes pour que elles soient prise en charge</span>serza.close() <span class="hljs-comment">#Je ferme le port série utilisé</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_send</span>():</span>     <span class="hljs-comment">#========================================</span>    <span class="hljs-comment">#=====[ PARTIE LECTURE DES DONNEES ]=====</span>    <span class="hljs-comment">#========================================</span>    <span class="hljs-comment">#Ici on définit les paramètres que on va utiliser pour communiquer avec le port d&#x27;entrée du raspberry</span>    ser = serial.Serial(    port=<span class="hljs-string">&#x27;/dev/ttyUSB0&#x27;</span>, <span class="hljs-comment">#Pour les tests, au début j&#x27;ai connecté le raspberry en USB, on utilise donc sur ce port</span>    baudrate = <span class="hljs-number">9600</span>, <span class="hljs-comment">#La vitesse de transmission (doit être adaptée au récepteur/émetteur des données!)</span>    parity=serial.PARITY_EVEN, <span class="hljs-comment">#Méthode de détection des erreurs de transmission définie à &quot;Even&quot; (signifie que le bit de parité est défini de sorte que le nombre de &quot;logiques&quot; doit être pair)</span>    stopbits=serial.STOPBITS_ONE, <span class="hljs-comment">#Bit d&#x27;arrêt</span>    bytesize=serial.SEVENBITS, <span class="hljs-comment">#Définit à 7bytes (pour avoir de l&#x27;ASCII)</span>        timeout=<span class="hljs-number">1</span>    )    counter=<span class="hljs-number">0</span>    timeout = time.time() + <span class="hljs-number">3</span> <span class="hljs-comment"># Délai de 3 secondes</span>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> : <span class="hljs-comment">#boucle qui durera 3 secondes</span>            <span class="hljs-keyword">if</span> time.time() &gt; timeout: <span class="hljs-comment">#Si les 3 secondes sont passées </span>            <span class="hljs-keyword">break</span>                <span class="hljs-comment">#Alors on sort de la boucle While</span>                x = ser.readline() <span class="hljs-comment">#On définit une variable x </span>        data_str = (str(x))<span class="hljs-comment">#On convertit les données récupérées en string, pour pouvoir mieux les maipuler plus tard</span>                <span class="hljs-comment">#On utilise les expressions régulières (Regex) pour extraire uniquement les données souhaitées de toutes celles que l&#x27;on reçoit</span>        reg_conso_live = <span class="hljs-string">r&quot;(SINSTS\\t)(.*.)(\\t,*.*)&quot;</span> <span class="hljs-comment">#Pour la consommation en direct</span>        reg_date = <span class="hljs-string">r&quot;(DATE\\t)(([eEhH])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9]))(\\t\\t,*.*)&quot;</span> <span class="hljs-comment">#Pour la date du compteur Linky</span>        reg_conso_tot = <span class="hljs-string">r&quot;(EAST\\t)(.*.)(\\t,*.*)&quot;</span> <span class="hljs-comment">#Pour la consommation totale</span>        reg_id = <span class="hljs-string">r&quot;(ADSC\\t)(.*.)(\\t,*.*)&quot;</span> <span class="hljs-comment">#Pour L&#x27;identifiant du compteur</span>        matches = re.finditer(reg_id, data_str, re.MULTILINE) <span class="hljs-comment">#On regarde dans les données que on a récupéré du compteur Linky (data_str), on spécifie comment récupérer les données avec Regex (reg_id)</span>        <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>):   <span class="hljs-comment">#Pour chaque résultat qui concorde avec ce que on recherche ...</span>            groupNum = <span class="hljs-number">2</span>                                                                        dataid = (<span class="hljs-string">&quot;&#123;group&#125;-&quot;</span>.format(group = match.group(groupNum))) <span class="hljs-comment">#On assigne à la variable dataid la valeur récupérée dans le groupe avec &#123;group&#125;, puis on spécifie l&#x27;index de la donnée, nous prendrons 2, </span>                                                                                                                                                      matches = re.finditer(reg_conso_live, data_str, re.MULTILINE) <span class="hljs-comment">#Pareil que au dessus, même index, une seule valeur à récupérer</span>        <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>):            groupNum = <span class="hljs-number">2</span>            datalive = (<span class="hljs-string">&quot;&#123;group&#125;-&quot;</span>.format(group = match.group(groupNum)))                    matches = re.finditer(reg_conso_tot, data_str, re.MULTILINE) <span class="hljs-comment">#Pareil que au dessus, même index, une seule valeur à récupérer</span>        <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>):            groupNum = <span class="hljs-number">2</span>            datatot = (<span class="hljs-string">&quot;&#123;group&#125;-&quot;</span>.format(group = match.group(groupNum)))                                    matches = re.finditer(reg_date, data_str, re.MULTILINE) <span class="hljs-comment">#Ici on récupère plusieurs valeurs (7 valeurs)</span>        <span class="hljs-keyword">for</span> matchNum, match <span class="hljs-keyword">in</span> enumerate(matches, start=<span class="hljs-number">1</span>):     <span class="hljs-comment">#ça du coup ne change pas</span>                                                                            datadate = (<span class="hljs-string">&quot;&#123;saison&#125; 20&#123;annee&#125;/&#123;mois&#125;/&#123;jour&#125; &#123;heure&#125;:&#123;minute&#125;:&#123;seconde&#125;&quot;</span>.format(saison = match.group(<span class="hljs-number">3</span>), annee = match.group(<span class="hljs-number">4</span>), mois = match.group(<span class="hljs-number">5</span>), jour = match.group(<span class="hljs-number">6</span>), heure = match.group(<span class="hljs-number">7</span>), minute = match.group(<span class="hljs-number">8</span>), seconde = match.group(<span class="hljs-number">9</span>)))                data = dataid + datalive + datatot + datadate <span class="hljs-comment">#On crée la variable data et on lui assigne l&#x27;ensemble des valeurs récupérées</span>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Données: &quot;</span> + data) <span class="hljs-comment">#J&#x27;affiche les données que je vais envoyer avec le port série dans la console, pour avoir un aperçu de ce que j&#x27;envoie</span>    ser.close() <span class="hljs-comment">#Je ferme le port d&#x27;écoute du port série</span>    <span class="hljs-comment">#========================================</span>    <span class="hljs-comment">#======[ PARTIE ENVOI DES DONNEES ]======</span>    <span class="hljs-comment">#========================================</span>    sera = serial.Serial( <span class="hljs-comment">#Je crée une nouvelle connexion série</span>    port=<span class="hljs-string">&#x27;/dev/ttyAMA0&#x27;</span>, <span class="hljs-comment">#J&#x27;utilise le port AMA0 pour envoyer les données cette fois-ci</span>    baudrate = <span class="hljs-number">19200</span>, <span class="hljs-comment">#Je définis la vitesse de transmission à 19200, car le module LoRa utilise ce baud pour communiquer</span>    )    sera.write(data.encode()) <span class="hljs-comment">#J&#x27;envoie les données sur le port série, et je les encode en bytes pour que elles soient prise en charge</span>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Fini.&quot;</span>) <span class="hljs-comment">#J&#x27;affiche avoir fini la transmission des données, pour m&#x27;éssurer que tout a bien fonctionné</span>    sera.close() <span class="hljs-comment">#Je ferme le port série utilisé</span>    read_send()sleep(<span class="hljs-number">60</span>*(<span class="hljs-number">60</span>-datetime.datetime.now().minute))<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    read_send()    sleep(<span class="hljs-number">60</span>*<span class="hljs-number">2</span>)</code></pre><p>If you use this code take care of the baudrate and the type of electric meter you are using (this one should be for standard mode).</p><p>Put the data on TTN’s Database</p></li></ul><hr><p> The Things Network offers a data storage where we can store our data fome some days (about a week). I used this feature to store our power consumption information.</p><p> <img src="https://i.imgur.com/8ptIZNn.png" alt="TTN data storage"></p><p>This service also offers a RESTFUL API provided by Swagger which makes the retrieving of data from the TTN database way easier.<br><img src="https://i.imgur.com/gN5kDZJ.png" alt="Swagger REST API"></p><p>You will have to enter your TTN secret key to give Swagger some permissions.</p><p>To test the api I used<a href="https://insomnia.rest/">Insomnia</a> as REST client, but you can also use <a href="https://www.postman.com/">Postman</a>.</p><p>I created a ‘GET’ request and put my TTN secret key in the header.</p><p><img src="https://i.imgur.com/O9DTvos.png" alt="Secret key insomnia request header"></p><p>And here’s my data :</p><p><img src="https://i.imgur.com/DPmChBE.png" alt="API data"></p><p>This is JSON which is very nice because I like to work with it.<br>The REST API was working. But I had one last thing to do in my part, start the python script when the Raspberry Py boots.</p><p>I had some issues with my rc.local file, and I decided to use cronjobs to handle this.<br>With cron I was also able to have some logs of what happens.</p><p>My part was now finished. But as I said, I also did the other parts because I had enough time for it. And there is no reason I don’t show you the entire project !<br>But I will be quick on this, because it’s mainly just some code.</p><p>I simply created a table with a design I probably found on <a href="https://codepen.io/">Codepen</a> and I used <a href="https://developers.google.com/chart">Google charts</a> to have some nice line charts and pie charts, and connected it to my database.<br>I created another page to retrieve the data from TTN’s database using the REST API.</p><p>Here is the code if you’re interested :<br>(I don’t have the google charts anymore, and the database isn’t available anymore, so I was not able to verify it..)</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/styles.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span></span><span class="hljs-tag">//<span class="hljs-attr">Connexion</span> à <span class="hljs-attr">la</span> <span class="hljs-attr">BDD</span></span><span class="hljs-tag">      $<span class="hljs-attr">connect</span> = <span class="hljs-string">mysqli_connect(</span>&quot;<span class="hljs-attr">localhost</span>&quot;, &quot;<span class="hljs-attr">root</span>&quot;, &quot;&quot;, &quot;<span class="hljs-attr">consommation</span>&quot;);</span><span class="hljs-tag">      $<span class="hljs-attr">connect-</span>&gt;</span>set_charset(&quot;utf8&quot;);//Commande à utiliser selon ce que on veut afficher      $query = mysqli_query($connect, &quot;SELECT * FROM releve ORDER BY id&quot;); ?&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 400px;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-comment">&lt;!-- Responsive table starts here --&gt;</span>    <span class="hljs-comment">&lt;!-- For correct display on small screens you must add &#x27;data-title&#x27; to each &#x27;td&#x27; in your table --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table-responsive-vertical shadow-z-1&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- Table starts here --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-mc-light-blue&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Linky ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Live<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Total<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">while</span>($<span class="hljs-attr">row</span> = <span class="hljs-string">$query-</span>&gt;</span>fetch_array())&#123; ?&gt;            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;ID&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">echo</span> $<span class="hljs-attr">row</span>[&#x27;<span class="hljs-attr">id</span>&#x27;] ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;Date&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">echo</span> $<span class="hljs-attr">row</span>[&#x27;<span class="hljs-attr">date</span>&#x27;] ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;Linky ID&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">echo</span> $<span class="hljs-attr">row</span>[&#x27;<span class="hljs-attr">id_compteur</span>&#x27;] ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;Live&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">echo</span> $<span class="hljs-attr">row</span>[&#x27;<span class="hljs-attr">conso_live</span>&#x27;] ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;Total&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">?php</span> <span class="hljs-attr">echo</span> $<span class="hljs-attr">row</span>[&#x27;<span class="hljs-attr">conso_total</span>&#x27;] ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">?php</span> &#125; ?&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>For the css file :</p><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">text-transform</span>: uppercase;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;  <span class="hljs-attribute">text-align</span>: center;  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;&#125;<span class="hljs-selector-tag">table</span>&#123;  <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;  <span class="hljs-attribute">table-layout</span>: fixed;&#125;<span class="hljs-selector-class">.tbl-header</span>&#123;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.3</span>); &#125;<span class="hljs-selector-class">.tbl-content</span>&#123;  <span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;  <span class="hljs-attribute">overflow-x</span>:auto;  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.3</span>);&#125;<span class="hljs-selector-tag">th</span>&#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">15px</span>;  <span class="hljs-attribute">text-align</span>: left;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">text-transform</span>: uppercase;&#125;<span class="hljs-selector-tag">td</span>&#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;  <span class="hljs-attribute">text-align</span>: left;  <span class="hljs-attribute">vertical-align</span>:middle;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">border-bottom</span>: solid <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.1</span>);&#125;<span class="hljs-comment">/* demo styles */</span><span class="hljs-keyword">@import</span> url(<span class="hljs-attribute">https:</span>//fonts.googleapis.com/css?family=<span class="hljs-attribute">Roboto:</span><span class="hljs-number">400</span>,<span class="hljs-number">500</span>,<span class="hljs-number">300</span>,<span class="hljs-number">700</span>);<span class="hljs-selector-tag">body</span>&#123;  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left, #<span class="hljs-number">25</span>c481, #<span class="hljs-number">25</span>b7c4);  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, #<span class="hljs-number">25</span>c481, #<span class="hljs-number">25</span>b7c4);  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Roboto&#x27;</span>, sans-serif;&#125;<span class="hljs-selector-tag">section</span>&#123;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;&#125;<span class="hljs-comment">/* follow me template */</span><span class="hljs-selector-class">.made-with-love</span> &#123;  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;  <span class="hljs-attribute">clear</span>: left;  <span class="hljs-attribute">text-align</span>: center;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;  <span class="hljs-attribute">font-family</span>: arial;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;&#125;<span class="hljs-selector-class">.made-with-love</span> <span class="hljs-selector-tag">i</span> &#123;  <span class="hljs-attribute">font-style</span>: normal;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#F50057</span>;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">top</span>: <span class="hljs-number">2px</span>;&#125;<span class="hljs-selector-class">.made-with-love</span> <span class="hljs-selector-tag">a</span> &#123;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">text-decoration</span>: none;&#125;<span class="hljs-selector-class">.made-with-love</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;  <span class="hljs-attribute">text-decoration</span>: underline;&#125;<span class="hljs-comment">/* for custom scrollbar for webkit browser*/</span><span class="hljs-selector-pseudo">::-webkit-scrollbar</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">6px</span>;&#125; <span class="hljs-selector-pseudo">::-webkit-scrollbar-track</span> &#123;    <span class="hljs-attribute">-webkit-box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>); &#125; <span class="hljs-selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;    <span class="hljs-attribute">-webkit-box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>); &#125;</code></pre><p>The PHP file to call the API, get the JSON data, ase and display it :</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$curl = curl_init();curl_setopt_array($curl, <span class="hljs-keyword">array</span>(  CURLOPT_URL =&gt; <span class="hljs-string">&quot;https://xxxxxxxx.data.thethingsnetwork.org/api/v2/query?last=20h&quot;</span>,  CURLOPT_RETURNTRANSFER =&gt; <span class="hljs-literal">true</span>,  CURLOPT_ENCODING =&gt; <span class="hljs-string">&quot;&quot;</span>,  CURLOPT_MAXREDIRS =&gt; <span class="hljs-number">10</span>,  CURLOPT_TIMEOUT =&gt; <span class="hljs-number">30</span>,  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,  CURLOPT_CUSTOMREQUEST =&gt; <span class="hljs-string">&quot;GET&quot;</span>,  CURLOPT_POSTFIELDS =&gt; <span class="hljs-string">&quot;&quot;</span>,  CURLOPT_HTTPHEADER =&gt; <span class="hljs-keyword">array</span>(    <span class="hljs-string">&quot;accept: application/json&quot;</span>,    <span class="hljs-string">&quot;authorization: key ttn-account-v2.O-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,    <span class="hljs-string">&quot;content-type: multipart/form-data; boundary=---011000010111000001101001&quot;</span>  ),));$response = curl_exec($curl);$err = curl_error($curl);curl_close($curl);<span class="hljs-keyword">if</span> ($err) &#123;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cURL Error #:&quot;</span> . $err;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//On décode le Json et on affiche toutes les valeurs contenant &quot;data&quot;</span>    $data = json_decode($response, <span class="hljs-literal">true</span>);        <span class="hljs-keyword">foreach</span> ($data <span class="hljs-keyword">as</span> $emp) &#123;         <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($emp[<span class="hljs-string">&#x27;data&#x27;</span>]) <span class="hljs-keyword">or</span> !<span class="hljs-keyword">empty</span>($emp[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;             $objet_data = explode(<span class="hljs-string">&quot;-&quot;</span>, $emp[<span class="hljs-string">&#x27;data&#x27;</span>]);             <span class="hljs-comment">//ID du compteur</span>             <span class="hljs-keyword">echo</span> $objet_data[<span class="hljs-number">0</span>].<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;             <span class="hljs-comment">//Consommation actuelle en Wh, à convertir en kWh ?</span>             <span class="hljs-keyword">echo</span> $objet_data[<span class="hljs-number">1</span>].<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;             <span class="hljs-comment">//Consommation totale en Wh, à convertir en kWh ?</span>             <span class="hljs-keyword">echo</span> $objet_data[<span class="hljs-number">2</span>].<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;             <span class="hljs-comment">//Date du compteur, à supprimer</span>             <span class="hljs-keyword">echo</span> $objet_data[<span class="hljs-number">3</span>].<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;             <span class="hljs-comment">//Date de The Things Network</span>             <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(substr($emp[<span class="hljs-string">&#x27;time&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-number">19</span>))).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;                          <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;         &#125;                     &#125;&#125;</code></pre><h2 id="Mobile-application"><a href="#Mobile-application" class="headerlink" title="Mobile application"></a>Mobile application</h2><p>Using an extra app to display the data from our database wasn’t really useful in my opinion (And I didn’t know how to program an android app). That’s because I cheated and I decided to simply use a webview to display the webpage in an app.<br>I don’t have the code for this anymore, but it is very easy to make :)</p><p>I hope you enjoyed this little post that took me only 5 hours to write, and of course you can contact me if you have some questions about it !</p>]]></content>
    
    
    
    <tags>
      
      <tag>automation</tag>
      
      <tag>PHP</tag>
      
      <tag>hardware</tag>
      
      <tag>project</tag>
      
      <tag>mobile</tag>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hacking Android 7&#39;s Easter Egg</title>
    <link href="/2021/03/03/Hacking-Android-7-s-Easter-Egg/"/>
    <url>/2021/03/03/Hacking-Android-7-s-Easter-Egg/</url>
    
    <content type="html"><![CDATA[<h1 id="Hacking-the-Android-7-Easter-Egg"><a href="#Hacking-the-Android-7-Easter-Egg" class="headerlink" title="Hacking the Android 7 Easter Egg"></a>Hacking the Android 7 Easter Egg</h1><p>On my old phone I have one of my favorite easter eggs, the cat collecting Easter Egg.<br>And I was curious if I could be able to edit this little game.</p><p>I found out that the Easter Egg is just an APK (<em>com.android.egg</em>), you can check that with the apk extractor app.</p><p>If you want to modify an app, you can use the method I will show you here. There are five main steps:</p><ul><li>Transform your app to an APK file</li><li>Decompile/disassemble the APK</li><li>Edit the decompiled file(s)</li><li>Rebuild the APK</li><li>Install the new modified app</li></ul><h2 id="Transform-your-app-to-an-APK-file"><a href="#Transform-your-app-to-an-APK-file" class="headerlink" title="Transform your app to an APK file"></a>Transform your app to an APK file</h2><p>I simply use Apk Extractor for that, you can <a href="https://play.google.com/store/apps/details?id=com.ext.ui">download it here</a>.</p><p><img src="https://i.imgur.com/ETf34Fo.png" alt="Apk Extractor"></p><p>You can simply transform an app to an APK file by clicking on it. The File is then stored on your storage, in a file called ‘ExtractedApks’.</p><h2 id="Decompile-the-Apk"><a href="#Decompile-the-Apk" class="headerlink" title="Decompile the Apk"></a>Decompile the Apk</h2><p>Once you ave your APK file, we can begin to decompile/disassemble it.<br>I use Visual Studio Code since I discovered APKLab, which is an awesome extension to reverse engineer Android apps.</p><p> You can install VSCode <a href="https://code.visualstudio.com/download">here</a> if you don’t already have it.</p><p> And install <a href="https://marketplace.visualstudio.com/items?itemName=Surendrajat.apklab">this</a> extension.</p><p>APKLab is very easy to use.</p><p>Open the Command Palette (Ctrl+Shift+P)  APKLab: Open an APK<br><img src="https://github.com/Surendrajat/APKLab/raw/master/assets/decode.gif" alt="open command palette"></p><p>I only use the last parameter to decompile the APK:<br><img src="https://i.imgur.com/ezdXmKk.png" alt="Decompile APK"></p><p>When the APK is decoded successfully, you should have a menu with some folders and files like this :<br><img src="https://i.imgur.com/dS8XEQv.png" alt="APK Folders"></p><p>Go to <code>res &gt; drawable</code> to find some images and other resources.<br>In the <code>res &gt; values</code> folder you will find some interestinf configuration files.</p><p><code>Note: If you don&#39;t use the same app than me, it would probably not be the same thing</code> </p><p><img src="https://i.imgur.com/JhR2VHh.png" alt="resources drawable files"></p><h2 id="Edit-the-decompiled-files"><a href="#Edit-the-decompiled-files" class="headerlink" title="Edit the decompiled files"></a>Edit the decompiled files</h2><p>In my case I’m gonna edit some values in the <code>res &gt; values &gt; arrays.xml</code> file.<br><img src="https://i.imgur.com/UOHBFTt.png" alt="resources values files"><br>I only changed the name of the food here.</p><p>We can also see that the icons used for the food are in the drawable directory. So i’m gonna edit them a little bit.</p><p>Icons are stored as a vector drawable, as an XML file. To have a better understanding of this kind of file and icons, I recommend <a href="https://shapeshifter.design/">shapeshifter.design</a>. Import a vector drawable file, and it will display you the icon.<br>You can then edit the different shapes of the icon and their color. You can even import an .svg file.<br>Once you are finished, you can export it to a new vector drawable.<br>Then copy the content of that new .xml file to the old .xml file, and overwrite all its content.<br>Now you changed an icon !</p><h2 id="Rebuild-the-APK"><a href="#Rebuild-the-APK" class="headerlink" title="Rebuild the APK"></a>Rebuild the APK</h2><p>Once you are finished, it’s time to rebuild the APK to test it.<br>Do a right click on the apktool.yml file and choose “APKLAB: Rebuild the APK”<br><img src="https://i.imgur.com/mRw3xqX.png" alt="Rebuild APK"></p><p>The new APK file is in the ‘dist’ folder, where your decompiled files are.</p><h2 id="Install-the-new-APK"><a href="#Install-the-new-APK" class="headerlink" title="Install the new APK"></a>Install the new APK</h2><p>Now you can put that APK file on your phone and install it.<br>One of my phone which isn’t rooted couldn’t install that new APK, but it works well on my rooted one.</p><p>Let’s take a look to the new app !</p><h2 id="Before"><a href="#Before" class="headerlink" title="Before:"></a>Before:</h2><p><img src="https://i.imgur.com/kUnvSRE.png" alt="Old easter egg app"></p><p>Yeah, sorry for that quality…</p><h2 id="After"><a href="#After" class="headerlink" title="After:"></a>After:</h2><p><img src="https://i.imgur.com/wA6RT4U.png" alt="New Easter Egg app"></p><p>Now I can feed my cats with cake-snails and some empty potatoes huhuhu</p><p>Have a nice day</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>reverse engineering</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Controlling a blind with PHP sockets</title>
    <link href="/2021/03/03/Controlling-a-blind-with-PHP-sockets/"/>
    <url>/2021/03/03/Controlling-a-blind-with-PHP-sockets/</url>
    
    <content type="html"><![CDATA[<h1 id="Controlling-a-blind-with-php-sockets"><a href="#Controlling-a-blind-with-php-sockets" class="headerlink" title="Controlling a blind with php sockets"></a>Controlling a blind with php sockets</h1><p>One of my school projects was to control the blind of an enterprise using only a webpage and an ethernet connected relay board.<br>I had to use the ETH-IO32B board from <a href="http://wifipower.fr/fr/controlboard/75-eth-io32b.html">EKO électronique</a>. Which is way too expensive in my opinion.<br>Anyway, the webpage had to be hosted on a Raspberry Pi, this website contains some buttons to control the blind.</p><h2 id="Prepare-the-Raspberry-Pi"><a href="#Prepare-the-Raspberry-Pi" class="headerlink" title="Prepare the Raspberry Pi."></a>Prepare the Raspberry Pi.</h2><p>My first goal was to install LAMP (Apache MySQL PHP bundle for Linux) on the Raspberry Pi, which permitted me to transform my Raspberry Pi into a webserver, and make a webpage available on the LAN.</p><p>Then I had to figure out how the ETH-IO board work. Hopefully I already had its local IP address.</p><p>To control the board I could have used the web interface created by the ETH-IO board (which is available by navigating to the boards IP address on port 9999, or 9998). But I am only using two relays out of the eight available.<br>In order to do that I had to use UDP sockets with PHP.</p><p>To create a socket I used the <code>socket_create()</code> function.<br>This function needs three parameters, which are :</p><ul><li>domain</li><li>type</li><li>protocol<br>And I used <code>AF_INET</code> for IPv4<br><code>SOCK_DGRAM</code> to support datagrams (for UDP)<br>and <code>udp</code> as the protocol.</li></ul><p>Once the socket was created, I had to send it using <code>socket_sendto()</code>. This function contains six parameters :</p><ul><li>Socket created with <code>socket_create()</code></li><li>Data<ul><li>To activate the first relay, I had to send <code>SwitchDIGOUT0</code> to the ETH-IO board. And <code>SwitchDIGOUT1</code> to activate the second one. </li></ul></li><li>Data Length in bytes (using simply <code>strlen()</code>)</li><li>Flags ( 0 )</li><li>IPv4 address (192.168.1.211)</li><li>Port number (9998)</li></ul><p>Once the socket was sent, it need to be closed using <code>socket_close()</code>.</p><p>This is the PHP function I created to control the blinds.</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send_to_ethio</span>(<span class="hljs-params">$relay</span>) </span>&#123;    $socket = socket_create(AF_INET , SOCK_DGRAM , SOL_UDP);        <span class="hljs-keyword">if</span>($socket &lt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Erreur: cannot create socket.&#x27;</span>;            <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);        &#125;    $dest_addr = <span class="hljs-string">&#x27;192.168.1.211&#x27;</span>;    $dest_port = <span class="hljs-string">&#x27;9998&#x27;</span>;     $donnees = $relay;    $data_lengh = strlen($donnees);     $envoi = socket_sendto($socket, $donnees, $data_lengh, <span class="hljs-number">0</span>, $dest_addr, $dest_port);    socket_close($socket);    &#125;</code></pre><p>I only had to add some HTML and CSS for the buttons, and then it looked really nice (no):</p><p><img src="https://i.imgur.com/0Or6gin.png" alt="Control center"></p><p>We have one button to change (switch) the position of the blind, and another one to stop (and restart) it whenever we want.</p><p>I also had to create a socket to receive some information from the ETH-IO board. But I had not enough time, and I don’t have this board anymore…</p><p>If you want an idea of what the entire system looked like, here is a simple schematic :<br><img src="https://i.imgur.com/O0PDuPx.png" alt="System schematic"><br>Of course you can have my entire source code</p><p>Here you have my HTML :</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ETHIO<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #2f2f2f; color:whitesmoke&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Control center<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scrollable&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Change position: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bouton&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;swi_btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Start/Stop position : <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bouton&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Start/Stop&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arr_btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>And there is my PHP :</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;swi_btn&#x27;</span>]))&#123;    send_to_ethio(<span class="hljs-string">&#x27;SwitchDIGOUT1&#x27;</span>);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;arr_btn&#x27;</span>]))&#123;    send_to_ethio(<span class="hljs-string">&#x27;SwitchDIGOUT0&#x27;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send_to_ethio</span>(<span class="hljs-params">$relay</span>) </span>&#123;    $socket = socket_create(AF_INET , SOCK_DGRAM , SOL_UDP);        <span class="hljs-keyword">if</span>($socket &lt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Erreur: cannot create socket.&#x27;</span>;            <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);        &#125;    $dest_addr = <span class="hljs-string">&#x27;192.168.1.211&#x27;</span>;    $dest_port = <span class="hljs-string">&#x27;9998&#x27;</span>;     $data = $relay;    $data_lengh = strlen($data);     $envoi = socket_sendto($socket, $data, $data_lengh, <span class="hljs-number">0</span>, $dest_addr, $dest_port);    socket_close($socket);    &#125;        <span class="hljs-meta">?&gt;</span></code></pre><p>I hope this will help you if, one day, you have to use the ETH-IO32B relay board.</p><p>ETH-IO32B user manual - <a href="http://wifipower.fr/fr/index.php?controller=attachment&amp;id_attachment=20">http://wifipower.fr/fr/index.php?controller=attachment&amp;id_attachment=20</a></p><p>Official website - <a href="https://www.eko-fpga.com/">https://www.eko-fpga.com/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>automation</tag>
      
      <tag>PHP</tag>
      
      <tag>hardware</tag>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steganography - It&#39;s outside the box</title>
    <link href="/2021/01/16/Steganography-It-s-outside-the-box/"/>
    <url>/2021/01/16/Steganography-It-s-outside-the-box/</url>
    
    <content type="html"><![CDATA[<p>A few months ago I take part to a CTF, like usually I learned a lot of cool tricks and tips. But there was one steganography challenge which I found awesome.<br>I use to search in the exifs of a picture, check relevant strings, or try binwalk and other tools on it… But this is another way to hide informations in a picture (or from a picture, you’ll see).</p><p>I will try to show you as good as possible how this works, and even how to create that challenge by your own :)</p><p>First of all, this is for PNG images only, it works with GIFs as well and JPG I don’t think so.</p><p>We only had a picture like this one :<br><img src="https://i.imgur.com/gOqSz7a.png" alt="In The Box"><br>(This isn’t the image from the challenge I did)</p><p>There is no hidden stuff in the picture above, because this technique corrupts the image data. If you wanna try to solve the challenge anyway, <a href="https://gofile.io/d/NxrTWE">I uploaded it on gofile</a>.</p><p>When you see a suspicious PNG image, I recommend to verify that it is actually a PNG image and that everything works fine. You can use <a href="http://www.libpng.org/pub/png/apps/pngcheck.html">PNGCheck</a> to do that.</p><p>As you can see here, there is a CRC error for the IHDR Chunk.Because he calculated the CRC checksum as <code>CBD6DF8A</code> but he found (and it should be) <code>C798A151</code> in the PNG data.<br><img src="https://i.imgur.com/pNj22bG.png" alt="PNGCheck Result CRC error in IHDR Chunk"><br>If you wanna learn more about PNG Headers, I recommend <a href="http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html">this</a>. To learn more about other headers, for GIF or JPG images, take a look at <a href="https://medium.com/ios-os-x-development/prefetching-images-size-without-downloading-them-entirely-in-swift-5c2f8a6f82e9">this article</a>.<br>Also, you won’t be able to open the picture in Linux, due to that error.<br><img src="https://i.imgur.com/vJqHkff.png" alt="CRC error on linux"></p><p>The best thing to do now will be fixing that image, I can tell you two different methods in order to do that. It depends on if you wanna learn something or if you just wanna use tools that do some obscure things…<br>Anyway, I’m gonna start with the coolest one !</p><h2 id="The-cool-method"><a href="#The-cool-method" class="headerlink" title="The cool method"></a>The cool method</h2><p>So, as PNGCheck says, it found <code>CBD6DF8A</code> as checksum in the image data, but it computed another checksum.<br>You probably want to know what <strong>image data</strong> is and what that <strong>checksum</strong> is about.</p><p>The image data is reprensented in hexadecimal here, I created a transparent 10x10 pixel image to show you what it looks like.<br><img src="https://i.imgur.com/mLu5mIO.png" alt="10x10 pixel transparent image"><br><em>you can use <a href="https://hexed.it/">this website</a> to do that</em></p><p>The middle bloc is the data in hexadecimal, that’s what we are looking for.<br>Each image has a signature to identify what image it is (PNG, JPG, GIF, …) and dome chunks.<br>Our PNG image contains a first chunk called <strong>IHDR</strong> chunk, and it contains<br>|                    |      |<br>|———————    |———    |<br>| Width                   | 4 bytes     |<br>| Height                  | 4 bytes     |<br>| Bit depth               | 1 byte      |<br>| Color type              | 1 byte      |<br>| Compression method      | 1 byte      |<br>| Filter method           | 1 byte      |<br>| Interlace method        | 1 byte      |</p><p>It can be represented like this for a better comprehension:<br><img src="https://i.imgur.com/yWkt0C6.png" alt="PNG Signature"><br><em>stolen from <a href="https://medium.com/ios-os-x-development/prefetching-images-size-without-downloading-them-entirely-in-swift-5c2f8a6f82e9">here</a></em></p><p>The rest of the data isn’t relevant for us in this case.</p><p>If you look at the different informations in the IHDR chunk, you can see a CRC checksum at the end with a size of 4 bytes. This checksum is computed using the data in the IHDR chunk.<br>In our picture this chunk is corrupted, to repair it we just have to replace the expected checksum (<code>C798A151</code>) with the computed one (<code>CBD6DF8A</code>).<br><img src="https://i.imgur.com/ABZriA5.png" alt="Before"><br><img src="https://i.imgur.com/l6uNw2V.png" alt="After"></p><p>Now the image should be repaired.<br>But we still have no information about hidden data…</p><p>As I told you, the CRC checksum is computed using data like the height, width, bit depth, etc..<br>If the CRC checksum changed, that means that one (ore more) of these parameters changed too.<br>The easyest thing to verify are the dimensions of the image. </p><p><img src="https://i.imgur.com/wJFZgxL.png" alt="Dimensions Bytes"><br>These bytes define the image dimensions.<br>since it is a square, obviously the bytes are the same. The size, in hexadecimal, is <code>1F4</code>.<br>To convert that to decimal, you can use a hex to decimal converter like <a href="https://www.rapidtables.com/convert/number/hex-to-decimal.html">this one</a>.<br><code>1F4</code> is equal to 500pixels.<br><img src="https://i.imgur.com/Jftz6no.png" alt="Hex to decimal"><br>If we take a look at the iamge dimensions, indeed, it is 500x500 pixels<br><img src="https://i.imgur.com/xc5p3EA.png" alt="Image Dimensions"></p><p>So, we want to increase these dimensions, we just have to convert a decimal value to hex.<br>I am gonna choose twice the initial size, 1000px.<br><img src="https://i.imgur.com/caiw7LX.png" alt="Decimal to Hex"></p><p>And replace <code>1F4</code> from the height with <code>3E8</code> in out image. I choose only the height here, because I already know what data I have to change. Otherwise I would play around a little bit, to find out what I have to change.</p><p><img src="https://i.imgur.com/ajca3MV.png" alt="New height bytes"><br>Now, save the image.</p><p>And…<br><img src="https://i.imgur.com/tLwvX1y.png" alt="OutBox"><br><em>Awesome.</em></p><h2 id="The-fast-method"><a href="#The-fast-method" class="headerlink" title="The fast method"></a>The fast method</h2><p>Of course, there are some tools to do all this much faster.<br>If you have an error with a PNG image, you can try to fix it using <a href="https://github.com/sherlly/PCRT">PCRT</a>.<br>It is very easy to use.<br><img src="https://i.imgur.com/iT2tZiU.png" alt="PCRT"></p><p>Once you fiwed the errors, there is an nice tool called <a href="http://entropymine.com/jason/tweakpng/">TweakPNG</a> to examine and modify PNG images.</p><p>You just have to load the image and change the dimensions in the IHDR chunk.<br><img src="https://i.imgur.com/2uuPAgl.png" alt="TweakPNG example"></p><h2 id="How-to-make-one"><a href="#How-to-make-one" class="headerlink" title="How to make one"></a>How to make one</h2><p>Another fun thing is to re create a challenge.<br>This part is very easy, take an image and place your hidden content on it.<br>Now you know how to change the image dimensions, you can reverse the process and decrease the wanted dimensions.<br>But, please don’t use this method to hide sensitive data, that’s security by obscurity and so it’s not safe. Encrypting your data is always the best solution, however you can combine both.</p><p>If you wonder if you can send that image to a friend.<br>Only if the CRC chunk is repaired, you can upload your image on imgur and share it.<br>The hidden data will remain in the image. If you try to upload it to instagram, or messenger it won’t work.</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>CTF</tag>
      
      <tag>steaganography</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How a mobile network is connected to the Internet</title>
    <link href="/2021/01/03/How-a-mobile-network-is-connected-to-the-Internet/"/>
    <url>/2021/01/03/How-a-mobile-network-is-connected-to-the-Internet/</url>
    
    <content type="html"><![CDATA[<h2 id="How-a-mobile-network-is-connected-to-the-Internet"><a href="#How-a-mobile-network-is-connected-to-the-Internet" class="headerlink" title="How a mobile network is connected to the Internet"></a>How a mobile network is connected to the Internet</h2><p>Have you ever wonder how you can get an internet access using only your phone, even without a WiFi connection ?</p><p>First of all, the way to connect is not the same for 4G and 5G networks (I will only talk about these two technologies here), indeed, 5G brings a lot of new features and the “5G Core” is changing from the “4G Core”.</p><h2 id="4G-Network"><a href="#4G-Network" class="headerlink" title="4G Network"></a>4G Network</h2><p>In 4G you are using a chip which is called a SIM (Subscriber Identification Module) card, this card contains your IMSI (International Mobile Subscriber Identity). Usually, you put this card in your mobile phone (can also be an IoT device, tablet, etc…). This device is called a UE (User Equipment), or terminal but I am gonna use the anme UE for this topic.<br>The UE has to connect to an eNodeB to access the network, which is an antenna with some emitters and receivers in a box next to the mast.</p><p><img src="https://www.pngkey.com/png/full/352-3527988_learn-about-what-is-on-a-cell-tower.png" alt="Cell Tower"><br>Diagram of a base station (eNB)</p><p>These eNodeB’s are close enought to each other to ensure a permanent connection to an UE, even if the device is moving. They are all connected to the mobile network operator’s IP network (or 4G Core). This network is composed of different interfaces, such as:</p><ul><li>HSS (Home Subscriber Server)<ul><li>Main database which contains all the data related to the users subscription, their IMSI to identify them on the network, and some data related on the location, security, status and profile of the user.</li></ul></li><li>MME (Mobility Management Entity)<ul><li>Database which is connected with some of the eNB’s, they store the inforamtions from the users in their area, to not overload the HSS of requests.</li></ul></li><li>EIR (Equipment Identity Register)<ul><li>Database to blacklist cloned or stolen phones by their IMEI.</li></ul></li><li>PGW (Packet Data Network Gateway or Packet Gateway)<ul><li>It constitutes a single gateway between the operator’s IP network and the Internet. It also provides some security functions. </li></ul></li><li>SGW (Serving Gateway)<ul><li>Its main function is routing and forwarding of user data packets. It is the entry point of data traffic for UE’s and it connects UE’s and PGW’s</li></ul></li><li>PCRF (Policy and Charging Rules Function)<ul><li>For Quality of Service (i.e. manage how much data an user is able to use) </li></ul></li></ul><p>These equipments are connected as follows:<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Evolved_Packet_Core.svg/1148px-Evolved_Packet_Core.svg.png" alt="Evolved Packet Core"></p><p>Most of the interfaces I described are visible here, and you can see how they are connected to each other.<br><strong>It’s important to make a difference between the user plane traffic, which are the profile, status, location of an user and the control plane traffic which are the packets of a video, or a web page.</strong> These different data never communicate which each other.<br>User plane traffic is represented with the blue lines, and control plane traffic is represented with the yellow lines, above.</p><p>On your first connection the MME doesn’t know you yet, only the HSS stores your information, and you don’t have an IP address.<br><img src="https://i.imgur.com/z4Ee56l.png" alt="First connection"><br>Here you can see what is happening at your first connection.</p><h2 id="4G-Security"><a href="#4G-Security" class="headerlink" title="4G Security"></a>4G Security</h2><p>I wanna talk a little bit about security, because it is extremely important. Let’s see different solutions for the following potential issues:</p><ul><li>Fraudulent use of the network<ul><li>Solution: <strong>authentication</strong></li></ul></li><li>Traffic sniffing<ul><li>Solution: <strong>Encryption</strong></li></ul></li><li>Data changes (changing the IP address on the attachment)<ul><li>Solution: <strong>Integrity</strong></li></ul></li><li>Follow/Locate an UE<ul><li>Solution: <strong>Temporary identity</strong></li></ul></li></ul><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>A number <em>k</em> is stored on both SIM card and HSS, and this number is only known by these.<br><img src="https://i.imgur.com/1NjHPo1.png" alt="LTE Auth 1"><br>On authentication, the IMSI is sent to the HSS in <strong>clear text</strong>, then the HSS creates a challenge with <em>k</em> and a random number defined by the HSS.<br>With the encryption function <strong>f(RAND, <em>k</em>)</strong> the HSS creates the expected response (XRES).<br>The HSS sends the XRES and the random number (RAND) to the MME, which saves XRES and sends RAND to the UE.<br>Then, using <strong>f(RAND, <em>k</em>)</strong> the UE creates a response (RES) using the provided RAND and <em>k</em>.<br>(If the number <em>k</em> of that SIM card is the same number <em>k</em> that the one stored in the database of the HSS, <strong>RES</strong> equals to <strong>XRES</strong>).</p><p>But using only this technique will result in some security issues. That’s why there are some additionnal protections.<br>Assume that an <strong>attacker</strong> created a fake network to be trusted by the UE, in this case the authentication method used so far isn’t strong enough. We have to add an extra layer of security, which is to check on the UE side that the mobile network operator’s IP network is a trusted network.<br>In order to do that, we will need an Authentication Token (AUTN) which is generated by the HSS using the function “<strong>g(RAND, <em>K</em>)</strong>“ (which is not the same that the function used to create XRES !).<br>AUTN is sent with XRES and RAND to the MME, which sends AUTN and RAND to the UE.<br>The UE is able to perform <strong>g(RAND, <em>K</em>)</strong>, which means that it is able to verify the IP network. If the network is identified as safe, the UE sends the RESponse to the MME to be verified, and authenticated.<br><strong>But</strong>… this configuration is vulnerable to a MITM (Man In The Middle) attack. Indeed, the attacker can easily listen to the Network, save the values of RAND and AUTN and pretend to be the real Network while sending these values to the victim’s UE. To prevent that, two successive authentications must lead to two different results. So we are gonna use a new parameter called SQN (SeQuence Number) in our request.<br><img src="https://i.imgur.com/SflK9FO.png" alt="Secure Auth"><br>(This is done two times, to be sure that SQN changed)<br>Now, <strong>g()  = g(RABD, <em>K</em>, SQN)</strong>.<br>This parameter is gonna increment, and the UE can verify that SQN, which is provided in AUTN using the function <strong>g()</strong>, doesn’t have the same value than before.<br>If eveything is okay, the UE and the Network are authenticated by each other and they can now communicate.</p><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><p>The best way to prevent an attacker to get our messages is to encrypt them, so he cannot read them. Here the data is encrypted using XOR ()  which has two parameters as input. </p><ul><li>The data to encrypt</li><li>An encryption sequence, generated by a strong encryption algorithm using a key called <em>Kenc</em></li></ul><p>If there is a lot of data to send, this data is sliced into different packets.<br>The encryption sequence is the result of a strong encryption algorithm, such as SNOW 3G for 3G, or AES (which is the best choice). No encryption can also be used, but it has to be for network testing <strong>ONLY</strong> !<br>For some security reasons, each packet has to be encrypted with a different encryption sequence.<br>To never have the same encryption sequence, five parameters that can change from a packet to another are given to the encryption algorithm:</p><ul><li>Kenc (RAND, key <em>k</em>)</li><li>Packet Number</li><li>Bearer</li><li>Direction (Ascending, Descending)</li><li>Packet size</li></ul><p>The algorithm to use and the encryption <em>key</em> are negociated during the UE’s authentication process. This key is the same during the whole data exchange (i.e. a web session).<br><img src="https://i.imgur.com/Vzia6Pt.png" alt="Encryption datagram"></p><p>The data is encrypted by the eNB and decrypted by the UE.<br>Or, it is encrypted by the UE and decrypted by the eNB.</p><h2 id="Integrity"><a href="#Integrity" class="headerlink" title="Integrity"></a>Integrity</h2><p>It is important to verify the integrity of a message to be sure that it comes from the right place (i.e. facebook.com) and not from a malicious person. Also, it permits to verify if the message was not modified on his way between the server (facebook in my example) and the client (you, me). Due to a MITM attack for example.<br>To do this, for each data frame we add some bytes of information to it. These bytes are calculated with a hashing algorithm. They are called Message Authentication Code (MAC, but this has nothing to do with the MAC address of the physical layer of the OSI model). This code is coded on 21 bits for LTE networks.<br>This Code is calculated using the message to transmit, and then it is attached at the end of the message.<br>After that the message is checked by re-calculating the MAC code, and comparing it to the sended MAC code inside the received data.<br><img src="https://i.imgur.com/x5CTJ5I.png" alt="Integrity Diagram"></p><p>Note that this process is only used for control plane traffic (such as the data from a website going through a SGW/PGW) and never for user plane traffic (data from the HSS).</p><p>But, just like the Encryption Sequence, the MAC must be always different. In order to do that, an encryption algorithm is used again.<br>But this time, the key is called <strong>K</strong>int and one of the parameters is the message (instead of the packet length).<br><img src="https://i.imgur.com/OkCXJW2.png" alt="Integrity Algorithm Diagram"><br>The encryption algorithm can be SNOW 3G, for 3G networks, but usually it is AES.</p><p><img src="https://i.imgur.com/gtNgRP8.png" alt="Integrity &amp; Encryption Diagram"><br>The MAC code is added to the Packet, encrypted, and sent.</p><h2 id="Secret-Key-Generation"><a href="#Secret-Key-Generation" class="headerlink" title="Secret Key Generation"></a>Secret Key Generation</h2><p>As you can see, the are some different secret keys for encryption. And there are a lot.<br>Let’s see how these are generated, and what they are for.<br>We have <strong>only one</strong> unique key K (constant) which is only stored inside the UE’s SIM card and the HSS. The HSS gives a key called <strong>K</strong>asme (Access Security Management Entity) to the MME, so it isn’t asked everytime someone needs to calculate a new key, this is now the responsibility of the MME’s. Of course, during this process the HSS asks for the identity of the network which is asking him a key.</p><p><strong>K</strong>asme is now the main key for all the other keys, they are calculated using this key and some other parameters, with an encryption algorithm.<br><img src="https://i.imgur.com/jn5sOYJ.png" alt="Secret keys generation Diagram"></p><h2 id="Temporary-Identity"><a href="#Temporary-Identity" class="headerlink" title="Temporary Identity"></a>Temporary Identity</h2><p>The very first connection transfers (authentication) the IMSI in clear text, because at that moment it is not yet possible to encrypt the data transfer (between the UE and the eNB).<br>After the authentication and when the encryption is set, an identifier called <strong>TMSI</strong> (Temporary Mobile Subscriber Identity) is sent to the UE, which is his new identifier for all the upcomming communications. The TMSI is allocated by the current MME and the mobile operator can choose when this identifier is renewed. The TMSI is changed when a new MME is used, or when the SIM card is removed, for example.</p><p>The TMSI is coded on 4 bytes (32 bits), but is not unique, two different MME’s can use the same TMSI to identify two different UE’s. That’s why the <strong>GUTI</strong> was created, it is the Globally Unique Temporary Identifier and is larger than the TMSI. The GUTI permits to the network to get the MME which allocated the TMSI.<br>Here’s what the GUTI looks like :<br><img src="https://i.imgur.com/ILktwdl.png" alt="GUTI Diagram"><br>Due to these parameters, the GUTI is a worldwide unique identifier for an UE, and can be changed at any time by an MME.</p><p>On a connection between the UE and the Network, the UE sends the GUTI and the MME is the only one which can link the GUTI and the IMSI of the subscriber. When When the UE wants to connect to the network, he sends his GUTI with his message, the MME checks the GUTI with the IMSI and then the MME checks the sended message to verify it’s integrity. If everything is okay, the UE is successfully authenticated. The MME activates the encryption and generates all the necessary keys on the eNB to ensure a secure connection.<br>Note that during this process, the HSS is not solicited and it suffers less traffic.</p><p>If the UE changes his position and has to use a new MME, this new MME can identify and find the previous used MME using the GUTI and find the TMSI. And the UE can have a secure connection and doesn’t have to establish a whole new authentication process. And the HSS is not solicited.</p><h2 id="5G-Networks"><a href="#5G-Networks" class="headerlink" title="5G Networks"></a>5G Networks</h2><p>Now we have seen how a 4G network works (globally), we can compare it to the fifth generation network.<br>But this article is long enough, and I wanna talk about 5G in a dedicated post.<br>See you!</p>]]></content>
    
    
    
    <tags>
      
      <tag>mobile</tag>
      
      <tag>networking</tag>
      
      <tag>4G</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Challenge Brigitte Friang - COROS CTF</title>
    <link href="/2020/11/11/Challenge-Brigitte-Friang-COROS-CTF/"/>
    <url>/2020/11/11/Challenge-Brigitte-Friang-COROS-CTF/</url>
    
    <content type="html"><![CDATA[<h2 id="COROS-CTF-write-up"><a href="#COROS-CTF-write-up" class="headerlink" title="COROS CTF write-up"></a>COROS CTF write-up</h2><p>After you got an entry link by solving one of the four entry challenges, which I am talking about <a href="/2020/11/11/Challenge-Brigitte-Friang-Entry/">here</a>, you had to create an account on the “real” CTF page.</p><p>There were 14 challenges<br><img src="/img/articles/challbrigittefriang/chall_list.png" alt="Challenge List"><br>The minimum point award was 50pts, and it could go up to 400pts for the most difficult challenges.</p><p>I flagged five challenges, which means about 450pts.<br>To be honest, I am very happy because I didn’t expect that I could solve one of these.</p><p>So, there are only five of the fourteen challenges.<br><img src="/img/articles/challbrigittefriang/chall_complete.png" alt="Challenges completed"></p><h2 id="Sous-l’ocean"><a href="#Sous-l’ocean" class="headerlink" title="Sous l’ocean"></a>Sous l’ocean</h2><ul><li>50pts</li><li>Cat. Forensics</li></ul><p>Description:</p><blockquote><p>They found Eve Descartes and they received an anonymous file from an Android phone. I had to find some information in the position history.</p></blockquote><p>This file was a memdump from an android device.<br>I found some GPS locations, and I thought that’s gonna be a location with the flag written on the ground or in a google comment.<br>I was totally wrong.</p><p>The coordinates I found:</p><blockquote><p>Last Known Locations:<br>    gps: Location[gps 37.421998,-122.084000 hAcc=20 et=+8m21s703ms alt=5.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    passive: Location[gps 37.421998,-122.084000 hAcc=20 et=+8m21s703ms alt=5.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>  Last Known Locations Coarse Intervals:<br>    gps: Location[gps 37.421998,-122.084000 hAcc=20 et=+43s355ms alt=5.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    passive: Location[gps 37.421998,-122.084000 hAcc=20 et=+43s355ms alt=5.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>  Custom Location History :<br>  Custom Location 1<br>        gps: Location[gps -47,1462046    30,9018186 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1963297    30,9012294 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1970164    30,8641039 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1438013    30,8652827 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1448313    30,9642508 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 2<br>        gps: Location[gps -47,0820032    30,8641039 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1300684    30,8643986 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1304118    30,9006402 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,0789133    30,9003456 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,0847498    30,8131067 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1307551    30,8148758 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1304118    30,8340395 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,1084391    30,8319759 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 3<br>        gps: Location[gps -47,0631205    30,8649880 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,0322214    30,9015240 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,0047556    30,8608621 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -47,0411478    30,8632198 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 4<br>        gps: Location[gps -46.9934318 30.8750074 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9481132 30.874418 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.953263 30.9085939 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9961784 30.9047644 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9927451 30.8511361 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9457099 30.8508414 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 5<br>        gps: Location[gps -46.9295737 30.8517256 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9072578 30.8926859 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.8797919 30.853494 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.9137809 30.8505466 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 6<br>        gps: Location[gps -46.8571326 30.8912128 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.856446 30.8484834 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 7<br>        gps: Location[gps -46.8173416 30.8745954 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7703064 30.8743007 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7778595 30.9096549 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.8242081 30.904058 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.8125351 30.8404074 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7733963 30.8474818 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 8<br>        gps: Location[gps -46.7438706 30.8772474 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7009552 30.8784261 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7054184 30.9034689 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7479904 30.8978716 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7376908 30.8474818 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.7115982 30.8498398 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 9<br>        gps: Location[gps -46.6456803 30.926149 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6625031 30.9264435 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6611298 30.8748901 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6473969 30.8657549 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6580399 30.8563241 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6587265 30.8014891 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6377838 30.7985401 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 10<br>        gps: Location[gps -46.5794168 30.8664391 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.5780435 30.9070986 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.617869 30.9082768 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.6213022 30.8463976 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.575297 30.8428605 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.5746103 30.869386 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 11<br>        gps: Location[gps -46.5114389 30.9053311 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.5443979 30.904742 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.5395914 30.8351962 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.4997659 30.8351962 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 12<br>        gps: Location[gps -46.4729868 30.9006178 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.433848 30.9017961 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.433848 30.8623132 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.4695535 30.8623132 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.433848 30.8629027 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.4297281 30.8222244 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.4674936 30.8269416 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 13<br>        gps: Location[gps -46.3644968 30.8204554 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.3727365 30.9076877 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.4214884 30.8682072 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.3425241 30.8629027 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 14<br>        gps: Location[gps -46.3184915 30.8198657 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.3219248 30.9041528 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2752329 30.8169173 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2793527 30.9035636 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>    Custom Location 15<br>        gps: Location[gps -46.247767 30.921826 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2196146 30.9212369 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2154947 30.8646709 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2409006 30.8469871 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2100015 30.8346066 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2120615 30.7827088 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]<br>        gps: Location[gps -46.2450205 30.7762196 hAcc=20 et=??? alt=0.0 vel=0.0 bear=0.0 vAcc=??? sAcc=??? bAcc=??? {Bundle[{satellites=0, maxCn0=0, meanCn0=0}]}]</p></blockquote><p>Finally I discovered that I probably had to pin each location on a map, with it coordinates.<br>So I tried, and it looks…<br><img src="/img/articles/challbrigittefriang/oc34n_dots.png" alt="Ocean Dots"><br>… interesting.</p><p>I tried to guess a word or someting, but these symbols look like brackets :<br><img src="/img/articles/challbrigittefriang/oc34n_dots_2.png" alt="Ocean Dots"></p><p>And the flag format is:<br>DGSESIEE{x}</p><p>Then I saw that there are eight “characters” before the brackets:<br><img src="/img/articles/challbrigittefriang/oc34n_dots_3.png" alt="Ocean Dots"><br>Exactly like the letters D G S E S I E E<br>So, the flag, or the thing I have to guess is probably that :<br><img src="/img/articles/challbrigittefriang/oc34n_dots_4.png" alt="Ocean Dots"></p><p>I also thought that the number of dots determines the position of the letter in the alphabet, and it remembers me of braille ( The tactile writing system used by people who are visually impaired)</p><p>I did <strong>a lot</strong> of guesses.<br>Finally I tried to play with the dots, and connect them together, to … finally, get the word <code>OC34N</code><br><img src="/img/articles/challbrigittefriang/oc34n_dots_5.png" alt="Ocean Dots"><br>The flag was <code>DGSESIEE&#123;OC34N&#125;</code></p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ul><li>50pts</li><li>Cat. Misc</li></ul><p>Description:</p><blockquote><p>A coworker created a little riddle. He’s asking you to solve it for weeks, make him happy. Here’s the riddle: What time is it?</p></blockquote><p>I had to use netcat to connect to the server. And I had to give a time, I suppose…<br>“Here’s the riddle: What time is it?”</p><p>My first idea was to give my current time in the following format:<br><code>14:52:32</code><br>And I also wrote different other things, without success.</p><p>And then I thought about unix timestamp, at the beginning I was really struggling.<br>Finally I discovered <a href="https://www.epochconverter.com/">https://www.epochconverter.com/</a> which displays the current unix epoch time to the nearest second.</p><p>And I just had to wait until the correct timestamp:<br><img src="/img/articles/challbrigittefriang/timestamp.png" alt="Unix Timestamp"></p><p>And there’s another flag !<br><img src="/img/articles/challbrigittefriang/timestamp_flag.png" alt="Unix Timestamp Flag"><br><code>DGSESIEE&#123;cb3b3481e492ccc4db7374274d23c659&#125;</code> </p><h2 id="Alone-Muks"><a href="#Alone-Muks" class="headerlink" title="Alone Muks"></a>Alone Muks</h2><ul><li>100pts</li><li>Cat. Pwn (machine owning)</li></ul><p>Description:</p><blockquote><p>I achived to connect a device on one of the autonomous trucks, and now I have to find a vulnerability in the <strong>Lates</strong> truck system. I am able to connect to the truck with SSH, but I have to get the navigation system privileges.</p></blockquote><p>I had to connect via SSH to port 5004<br>With the following credentials :<br><code>user:user</code><br>Let’s do it.<br><code>ssh user@51.159.59.20 -p 5004</code></p><p>Connection Via SSH:<br><img src="/img/articles/challbrigittefriang/elon_ssh1.png" alt="Alone Muks SSH"></p><p>I tried some credentials, and I tried to guess the username.<br>But found nothing, so I decided to do <code>ctrl+c</code><br>And..<br>Okay, I’m in.<br><img src="/img/articles/challbrigittefriang/elon_ssh2.png" alt="Alone Muks SSH"><br>(You can see that I tried to use some commands, without success…)<br>I saw that the errors came from “-rbash”, which means I am in a restricted shell.<br>I restarted my ssh connection and added a parameter, to try to bybass the restricted shell, but it didn’t really work this time.<br>But my username was green, and, I couldn’t use the ‘cd’ command !</p><p>I was able to see see the environment variables:<br><img src="/img/articles/challbrigittefriang/elon_ssh3.png" alt="Alone Muks SSH"></p><p>But no one was writeable.<br>(only -x, executable, or -rx, readable-exacutable)</p><p>I was able to see what’s in the current directory by using the test command, and doing <strong>[TAB]</strong><br><img src="/img/articles/challbrigittefriang/elon_ssh4.png" alt="Alone Muks SSH"></p><p>And by doing double <strong>[TAB]</strong> I was able to see the awailable commands, such as the help command, but not as precisely.</p><p>As I said, I was able to use ‘cd’ to change my directory:<br><img src="/img/articles/challbrigittefriang/elon_ssh5.png" alt="Alone Muks SSH"></p><p>And here it is, my flag.txt.<br><img src="/img/articles/challbrigittefriang/elon_ssh6.png" alt="Alone Muks SSH"></p><p>I was not able to acces to usual commands like ‘cat’, ‘less’, ‘head’… to view the content of flag.txt<br>I was able to use echo, but I did not have the permission to access the file :<br><img src="/img/articles/challbrigittefriang/elon_ssh7.png" alt="Alone Muks SSH"></p><p>In the user directory was a file called login.py<br><img src="/img/articles/challbrigittefriang/elon_ssh8.png" alt="Alone Muks SSH"><br>And it starts when I connected to the machine with SSH.<br>I tried the same techniques I used to read flag.txt to read login.py.<br>And the echo command saved me:<br><img src="/img/articles/challbrigittefriang/elon_ssh9.png" alt="Alone Muks SSH"></p><p><code>username: dev</code><br><code>password: Sup3rStr0ngP4ssw0rd!!</code></p><p><img src="/img/articles/challbrigittefriang/elon_ssh10.png" alt="Alone Muks SSH"><br>I am dev now :)</p><p>But I don’t have more or less permissions than before.<br>And this file, aswell as all its content is completely useless.</p><p>I have to use another shell, to be sure I don’t use a restricted shell I did that command :</p><p><code>ssh user@51.159.59.20 -p 5004 -t &quot;sh&quot;</code></p><p>I can see what’s inside the passwd file:</p><pre><code class="hljs ruby">$ cat /etc/passwd<span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span><span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span>www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> List <span class="hljs-symbol">Manager:</span>/var/<span class="hljs-symbol">list:</span>/usr/sbin/nologin<span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/var/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> Bug-Reporting System (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">_apt:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">sshd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">101</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/run/sshd</span><span class="hljs-symbol">:/usr/sbin/nologin</span>systemd-<span class="hljs-symbol">timesync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">102</span><span class="hljs-symbol">:</span><span class="hljs-number">103</span><span class="hljs-symbol">:systemd</span> Time Synchronization,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/usr/sbin/nologin</span>systemd-<span class="hljs-symbol">network:</span><span class="hljs-symbol">x:</span><span class="hljs-number">103</span><span class="hljs-symbol">:</span><span class="hljs-number">104</span><span class="hljs-symbol">:systemd</span> Network Management,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/usr/sbin/nologin</span>systemd-<span class="hljs-symbol">resolve:</span><span class="hljs-symbol">x:</span><span class="hljs-number">104</span><span class="hljs-symbol">:</span><span class="hljs-number">105</span><span class="hljs-symbol">:systemd</span> Resolver,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">user:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/user</span><span class="hljs-symbol">:/bin/sh</span><span class="hljs-symbol">globalSystem:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/globalSystem</span><span class="hljs-symbol">:/bin/bash</span><span class="hljs-symbol">navigationSystem:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1002</span><span class="hljs-symbol">:</span><span class="hljs-number">1002</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/navigationSystem</span><span class="hljs-symbol">:/bin/bash</span></code></pre><p>And I was able to get some system informations:</p><pre><code class="hljs angelscript">$ uname -aLinux <span class="hljs-number">2</span>c45860dc421 <span class="hljs-number">4.9</span><span class="hljs-number">.0</span><span class="hljs-number">-13</span>-amd64 #<span class="hljs-number">1</span> SMP Debian <span class="hljs-number">4.9</span><span class="hljs-number">.228</span><span class="hljs-number">-1</span> (<span class="hljs-number">2020</span><span class="hljs-number">-07</span><span class="hljs-number">-05</span>) x86_64 GNU/Linux</code></pre><p>But there was nothing really interesting.</p><p>I know that there are two uncommon users</p><ul><li>globalSystem</li><li>navigationSystem</li></ul><p><em>navigationSystem</em> had the permissions to read flag.txt</p><p>I am gonna see which commands can be used by my current user with the -l (L) parameter</p><pre><code class="hljs routeros">-l[l] [command]<span class="hljs-keyword">If</span> <span class="hljs-literal">no</span> command is specified, the -l (list) option will list the allowed (<span class="hljs-keyword">and</span> forbidden) commands <span class="hljs-keyword">for</span> the invoking<span class="hljs-built_in"> user </span>(<span class="hljs-keyword">or</span> the<span class="hljs-built_in"> user </span>specified by the -U option) on the current host.</code></pre><p>There’s the output of that beautiful command:<br><img src="/img/articles/challbrigittefriang/elon_ssh11.png" alt="Alone Muks SSH"></p><p>In green, we have the user who has the permission.<br>In blue, NOPASSWD means that no password is required.<br>In yellow, the allowed file or command.</p><p>That means, the current user is allowed to use Vim !</p><p>I tried a lot of thigs using vim.<br>Create files, read files, but nothing successful.</p><p>Then I found out that I was able to spawn a shell with Vim.</p><p>Of course, I used Vim as the globalSystem user :<br><img src="/img/articles/challbrigittefriang/elon_ssh12.png" alt="Alone Muks SSH"></p><p>Opening a shell:<br><img src="/img/articles/challbrigittefriang/elon_ssh13.png" alt="Alone Muks SSH"></p><p>And now I am globalSystem</p><p>Awesome.</p><p>Let’s do that again, to see if we have some additionnal permissions with this account.</p><p><img src="/img/articles/challbrigittefriang/elon_ssh14.png" alt="Alone Muks SSH"></p><p>Great, now we can access a file, called update.</p><p>This file has enough permissions to access the floag.txt file, well.. in theory.<br>I just have to edit it with Vim…<br><img src="/img/articles/challbrigittefriang/elon_ssh15.png" alt="Alone Muks SSH"></p><p>Ans then…<br><img src="/img/articles/challbrigittefriang/elon_ssh16.png" alt="Alone Muks SSH"></p><p>Oops..<br>Don’t forget to run that file with navigationSystem’s permissions.<br><img src="/img/articles/challbrigittefriang/elon_ssh_flag.png" alt="Alone Muks Flag"><br>Allright :)</p><p>This part is done as well..</p><h2 id="Le-discret-napier"><a href="#Le-discret-napier" class="headerlink" title="Le discret napier"></a>Le discret napier</h2><ul><li>150pts</li><li>Cat. cryptography</li></ul><p>Description:</p><blockquote><p>Stockos uses a password based on a mathematical solution. x is the password, find x.<br>17^<strong>x</strong>  183512102249711162422426526694763570228 <strong>[207419578609033051199924683129295125643]</strong></p></blockquote><p>Basically, I only had to solve <code>17^x  183512102249711162422426526694763570228 [207419578609033051199924683129295125643]</code> and find x.<br>The flag should be DGSESIEE{x}.</p><p>This looks a lot like congruence (as in the crypto path at the beginning).<br>But dcode’s tool didn’t work this time and that’s probably because it isn’t exactly the same thing.<br>This is called <code>discrete logarithm</code>, and as Wikipedia says:</p><pre><code class="hljs oxygene">Discrete logarithms are quickly computable <span class="hljs-keyword">in</span> a few special cases. However, no efficient <span class="hljs-function"><span class="hljs-keyword">method</span> <span class="hljs-title">is</span> <span class="hljs-title">known</span> <span class="hljs-title">for</span> <span class="hljs-title">computing</span> <span class="hljs-title">them</span> <span class="hljs-title">in</span> <span class="hljs-title">general</span>. <span class="hljs-title">Several</span> <span class="hljs-title">important</span> <span class="hljs-title">algorithms</span> <span class="hljs-title">in</span> <span class="hljs-title">public</span>-<span class="hljs-title">key</span> <span class="hljs-title">cryptography</span> <span class="hljs-title">base</span> <span class="hljs-title">their</span> <span class="hljs-title">security</span> <span class="hljs-title">on</span> <span class="hljs-title">the</span> <span class="hljs-title">assumption</span> <span class="hljs-title">that</span> <span class="hljs-title">the</span> <span class="hljs-title">discrete</span> <span class="hljs-title">logarithm</span> <span class="hljs-title">problem</span> <span class="hljs-title">over</span> <span class="hljs-title">carefully</span> <span class="hljs-title">chosen</span> <span class="hljs-title">groups</span> <span class="hljs-title">has</span> <span class="hljs-title">no</span> <span class="hljs-title">efficient</span> <span class="hljs-title">solution</span>.</span></code></pre><p>It’s not gonna be easy.</p><p><img src="/img/articles/challbrigittefriang/napier_1.png" alt="Discret Napier"></p><p>After hours of research, I finally found this document (french):<br><a href="http://wikisecu.fr/doku.php?id=cryptographie:elgamal">http://wikisecu.fr/doku.php?id=cryptographie:elgamal</a></p><p>And I started SageMath to try that:<br><img src="/img/articles/challbrigittefriang/napier_2.png" alt="Discret Napier"></p><p>It seemed not bad at all, so I did the same thing with the informations I have for this challenge.</p><p>So <code>d = a^c mod b</code> became <code>183512102249711162422426526694763570228  = 17^x mod 207419578609033051199924683129295125643</code><br>Which means, </p><pre><code class="hljs routeros">sage: <span class="hljs-attribute">a</span>=2sage: <span class="hljs-attribute">b</span>=5sage: <span class="hljs-attribute">d</span>=3sage: <span class="hljs-attribute">e</span>=mod(a,b)sage: discrete_log(d,e)</code></pre><p>Became</p><pre><code class="hljs routeros">sage: <span class="hljs-attribute">a</span>=17sage: <span class="hljs-attribute">b</span>=207419578609033051199924683129295125643sage: <span class="hljs-attribute">d</span>=183512102249711162422426526694763570228sage: <span class="hljs-attribute">e</span>=mod(a,b)sage: discrete_log(d,e)</code></pre><p>But.<br><img src="/img/articles/challbrigittefriang/napier_3.png" alt="Discret Napier"><br>My computer felt very bad, and over that</p><p>It didn’t work.<br><img src="/img/articles/challbrigittefriang/napier_4.png" alt="Discret Napier"><br>I broke my Spotify, and my computer was super slow.<br>That’s probably why I don’t really like maths… </p><p>Anyway, I decided to search an alternative to SageMath, and after some other hours of research I finally discovered an online tool to do exactly what I needed !</p><p><a href="https://www.alpertron.com.ar/DILOG.HTM">https://www.alpertron.com.ar/DILOG.HTM</a></p><p>I put all my data in it, and then I was waiting about 7 to 8 hours.<br>And finally !<br><img src="/img/articles/challbrigittefriang/napier_5.png" alt="Discret Napier"></p><p>After somes tries, I found out that the flag was DGSESIEE{697873717765}</p><p><strong>BONUS</strong><br>As I write this, I know how to use SageMath to solve this problem in a few minutes (using my computer).</p><pre><code class="hljs isbl"><span class="hljs-variable">sage</span>: <span class="hljs-variable">K</span> = <span class="hljs-function"><span class="hljs-title">GF</span>(<span class="hljs-number">207419578609033051199924683129295125643</span>)</span><span class="hljs-variable">sage</span>: <span class="hljs-variable">g</span> = <span class="hljs-function"><span class="hljs-title">K</span>(<span class="hljs-number">17</span>)</span><span class="hljs-variable">sage</span>: <span class="hljs-variable">h</span> = <span class="hljs-function"><span class="hljs-title">K</span>(<span class="hljs-number">183512102249711162422426526694763570228</span>)</span><span class="hljs-variable">sage</span>: <span class="hljs-variable">h.log</span>(<span class="hljs-variable">g</span>)</code></pre><p>Find <code>x</code> in <code>g^x = h mod p</code>, is equivalent to find <code>x = h.log(g)</code> in <code>K</code> .</p><h2 id="Chatbot"><a href="#Chatbot" class="headerlink" title="Chatbot"></a>Chatbot</h2><ul><li>100pts</li><li>Cat. Web</li></ul><p>Description:</p><blockquote><p>EvilGouv recently opened a chatbot service, but nobody likes him and he’s really bad… And it is high probably vulnerable. Find a way to access the Intranet ! </p></blockquote><p>We are told that EvilGouv recently opened a chatbot. And there’s probably a security breach.<br>I have to find a way to enter in their intranet.</p><p>Clue: Local network.</p><p>The chatbot:<br><img src="/img/articles/challbrigittefriang/chatbot.png" alt="Chatbot"></p><p>The first thing I thought of was checking if there are XSS vulnerabilities.<br>I was right.<br><img src="/img/articles/challbrigittefriang/chatbot2.png" alt="chatbot"></p><p>I checked the javascript source code of the bot, maybe there are some hidden commands.<br>But the answers were not on the client side.</p><p>I have to access the server side, and I only have a XSS.</p><p>I checked the script again, and I saw that, if the input text is an URL, the bot is doing a GET request to get some informations to display with that URL.<br>But there’s a vulnerability called <code>SSRF</code>, which means that we can exploit the URL checking system to scan for open machines in the intranet.<br>So I searched four hours, and I finally found out that the virtual host was <code>intranet</code>.<br><img src="/img/articles/challbrigittefriang/chatbot3.png" alt="chatbot"><br>Bruteforce by hand is not funny…</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>CTF</tag>
      
      <tag>challengecybersecfr</tag>
      
      <tag>DGSE</tag>
      
      <tag>ESIEE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Challenge Brigitte Friang - Entry</title>
    <link href="/2020/11/11/Challenge-Brigitte-Friang-Entry/"/>
    <url>/2020/11/11/Challenge-Brigitte-Friang-Entry/</url>
    
    <content type="html"><![CDATA[<h1 id="Challenge-Brigitte-Friang-write-up"><a href="#Challenge-Brigitte-Friang-write-up" class="headerlink" title="Challenge Brigitte Friang write-up"></a>Challenge Brigitte Friang write-up</h1><p>Organized by the <a href="https://www.defense.gouv.fr/dgse">DGSE</a> and <a href="https://www.esiee.fr/fr">ESIEE Paris</a></p><p><img src="/img/bf-homepage.png" alt="challengecybersec.fr homepage"><br>Website link: <a href="https://challengecybersec.fr/">https://challengecybersec.fr</a><br>(It might not work anymore)</p><p>We only had this website, because this is where it all starts.<br>Source code of the web page (<code>ctrl+u</code>) :<br><img src="/img/articles/challbrigittefriang/homepage-source.png" alt="Homepage source code"><br>We can clearly see that there’s a hidden link.</p><p>On this hidden link, /static/message-secret.html is a secret message.</p><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><pre><code class="hljs stata">Zp cvbz whyclulg <span class="hljs-keyword">h</span> spyl jl tlzzhnl, j&#x27;lza xbl cvbz wvbclg ylqvpukyl svwlyhapvu Iypnpaal Myphun. Ylqvpnulg-uvbz yhwpkltlua.Iypnpaal Myphun lza bul ylzpzahual, qvbyuhspzal <span class="hljs-keyword">la</span> ljypchpul myhujhpzl. Lssl lza ull sl 23/01/1924 <span class="hljs-keyword">h</span> Whypz, lssl <span class="hljs-keyword">h</span> 19 huz zvbz s&#x27;vjjbwhapvu svyzxb&#x27;lssl lza yljyball wbpz mvytll jvttl zljylahpyl/jopmmylbzl why bu hnlua kb IJYH, Qlhu-Myhujvpz Jsvbla klz Wlyybjolz hsphz Nhspsll jolm kb Ibylhb klz vwlyhapvuz hlypluulz (IVH) kl <span class="hljs-keyword">sh</span> Ylnpvu T (Jval kb Uvyk, Mpupzalyl, Pukyl <span class="hljs-keyword">la</span> Svpyl, Vyul, Zhyaol, Svpyl pumlyplbyl, Thpul <span class="hljs-keyword">la</span> Svpyl, Tvyipohu, Clukll). Iypnpaal Myphun bapspzl whymvpz klz mvbshykz wvby jhjoly klz jvklz. Jvtwslalg sBYS hclj spumvythapvu xbp lza jhjoll khuz jl tlzzhnl.Zbpal <span class="hljs-keyword">h</span> shyylzahapvu <span class="hljs-keyword">la</span> <span class="hljs-keyword">sh</span> ayhopzvu kl Wplyyl Thubls, Iypnpaal Myphun lza hyylall why <span class="hljs-keyword">sh</span> Nlzahwv. Lssl lza islzzll why ihssl lu aluahua kl zlumbpy <span class="hljs-keyword">la</span> lza jvukbpal <span class="hljs-keyword">h</span> sOvwpahs kl <span class="hljs-keyword">sh</span> Wpapl. Klz ylzpzahuaz alualyvua kl <span class="hljs-keyword">sh</span> spilyly thpz zhuz zbjjlz. Lssl lza avyabyll <span class="hljs-keyword">la</span> ul kvuulyh whz k&#x27;pumvythapvuz. Uvbisplg whz <span class="hljs-keyword">sh</span> ihyyl vispxbl. Lssl lza luzbpal lucvfll khuz sl jhtw kl Yhcluziybjr.Hwylz zvu ylavby kl klwvyahapvu, lssl whyapjpwl <span class="hljs-keyword">h</span> <span class="hljs-keyword">sh</span> jylhapvu kb Yhzzltisltlua kb wlbwsl myhuçhpz (YWM). Lssl pualnyl <span class="hljs-keyword">sh</span> wlapal lxbpwl, hbavby k&#x27;Hukyl Thsyhbe, xbp ch wylwhyly sl kpzjvbyz mvukhalby kl Zayhzivbyn lu 1947 <span class="hljs-keyword">la</span> slz lsljapvuz slnpzshapclz kl 1951.Lssl yluayl <span class="hljs-keyword">h</span> s&#x27;VYAM, <span class="hljs-keyword">la</span> klcplua jvyylzwvukhual kl nblyyl. Lssl viaplua zvu iylcla kl zhba lu whyhjobal <span class="hljs-keyword">la</span> hjjvtwhnul klz jvtthukvz kl whyhjobapzalz lu vwlyhapvu kbyhua <span class="hljs-keyword">sh</span> nblyyl kPukvjopul. Lssl yhjvual zvu lewlyplujl khuz Slz Mslbyz kb jpls (1955). K&#x27;hbaylz hnluaz zvua zby sl jvbw hb tvtlua vb ql cvbz whysl. Slz tlpsslbyz k&#x27;luayl cvbz zl kvuulyvua yluklg-cvbz <span class="hljs-keyword">h</span> s&#x27;Lbyvwlhu Jfilydllr <span class="hljs-keyword">h</span> Yluulz wvby bul yltpzl kl wype. Ylzvsclg sl wsbz k&#x27;lwylbclz hchua <span class="hljs-keyword">sh</span> mpu kl jlaal tpzzpvu <span class="hljs-keyword">la</span> alualg kl nhnuly cvayl wshjl whytp s&#x27;lspal! Why <span class="hljs-keyword">sh</span> zbpal, lssl jvbcyl slewlkpapvu kl Zblg, <span class="hljs-keyword">sh</span> nblyyl klz Zpe Qvbyz <span class="hljs-keyword">la</span> <span class="hljs-keyword">sh</span> nblyyl kb Cpla Uht. Lssl wyluk wvzpapvu lu mhclby k&#x27;bul hbavuvtpl kb qvbyuhspztl khuz sl zlycpjl wbispj jl xbp sbp chba k&#x27;layl spjlujpll kl s&#x27;VYAM.Lssl ljypa wsbzplbyz spcylz <span class="hljs-keyword">la</span> altvpnul kl s&#x27;lunhnltlua klz mlttlz khuz <span class="hljs-keyword">sh</span> Ylzpzahujl.</code></pre><p>The title of that page is “caesar”, so I went to <a href="https://gchq.github.io/CyberChef/">cyberchef</a> and used ROT13 to decode the message. I tried all the alterations until I found something relevant. And I had to use 19 alterations to find a correct message.</p><pre><code class="hljs stata">Si vous parvenez a lire ce message, c&#x27;<span class="hljs-keyword">est</span> <span class="hljs-keyword">que</span> vous pouvez rejoindre loperation Brigitte Friang. Rejoignez-nous rapidement.Brigitte Friang <span class="hljs-keyword">est</span> une resistante, journaliste et ecrivaine francaise. Elle <span class="hljs-keyword">est</span> nee le 23/01/1924 a Paris, elle a 19 ans sous <span class="hljs-keyword">l</span>&#x27;occupation lorsqu&#x27;elle <span class="hljs-keyword">est</span> recrutee puis formee comme secretaire/chiffreuse par un agent du BCRA, Jean-Francois Clouet <span class="hljs-keyword">des</span> Perruches alias Galilee chef du Bureau <span class="hljs-keyword">des</span> operations aeriennes (BOA) <span class="hljs-keyword">de</span> <span class="hljs-keyword">la</span> Region <span class="hljs-keyword">M</span> (Cote du Nord, Finistere, Indre et Loire, Orne, Sarthe, Loire inferieure, Maine et Loire, Morbihan, Vendee). Brigitte Friang utilise parfois <span class="hljs-keyword">des</span> foulards pour cacher <span class="hljs-keyword">des</span> codes. Completez lURL avec linformation <span class="hljs-keyword">qui</span> <span class="hljs-keyword">est</span> cachee dans ce message.Suite a larrestation et <span class="hljs-keyword">la</span> trahison <span class="hljs-keyword">de</span> Pierre Manuel, Brigitte Friang <span class="hljs-keyword">est</span> arretee par <span class="hljs-keyword">la</span> Gestapo. Elle <span class="hljs-keyword">est</span> blessee par balle <span class="hljs-keyword">en</span> tentant <span class="hljs-keyword">de</span> senfuir et <span class="hljs-keyword">est</span> conduite a lHopital <span class="hljs-keyword">de</span> <span class="hljs-keyword">la</span> Pitie. <span class="hljs-keyword">Des</span> resistants tenteront <span class="hljs-keyword">de</span> <span class="hljs-keyword">la</span> liberer mais sans succes. Elle <span class="hljs-keyword">est</span> torturee et ne donnera pas <span class="hljs-keyword">d</span>&#x27;informations. Noubliez pas <span class="hljs-keyword">la</span> barre oblique. Elle <span class="hljs-keyword">est</span> ensuite envoyee dans le camp <span class="hljs-keyword">de</span> Ravensbruck.Apres son retour <span class="hljs-keyword">de</span> deportation, elle participe a <span class="hljs-keyword">la</span> creation du Rassemblement du peuple français (RPF). Elle integre <span class="hljs-keyword">la</span> petite equipe, autour <span class="hljs-keyword">d</span>&#x27;Andre Malraux, <span class="hljs-keyword">qui</span> va preparer le discours fondateur <span class="hljs-keyword">de</span> Strasbourg <span class="hljs-keyword">en</span> 1947 et les elections legislatives <span class="hljs-keyword">de</span> 1951.Elle rentre a <span class="hljs-keyword">l</span>&#x27;ORTF, et devient correspondante <span class="hljs-keyword">de</span> guerre. Elle obtient son brevet <span class="hljs-keyword">de</span> saut <span class="hljs-keyword">en</span> parachute et accompagne <span class="hljs-keyword">des</span> commandos <span class="hljs-keyword">de</span> parachutistes <span class="hljs-keyword">en</span> operation durant <span class="hljs-keyword">la</span> guerre dIndochine. Elle raconte son experience dans Les Fleurs du ciel (1955). <span class="hljs-keyword">D</span>&#x27;autres agents sont sur le coup au moment <span class="hljs-keyword">ou</span> je vous parle. Les meilleurs <span class="hljs-keyword">d</span>&#x27;entre vous <span class="hljs-keyword">se</span> donneront rendez-vous a <span class="hljs-keyword">l</span>&#x27;European Cyberweek a Rennes pour une remise <span class="hljs-keyword">de</span> prix. Resolvez le plus <span class="hljs-keyword">d</span>&#x27;epreuves avant <span class="hljs-keyword">la</span> fin <span class="hljs-keyword">de</span> cette mission et tentez <span class="hljs-keyword">de</span> gagner votre place parmi <span class="hljs-keyword">l</span>&#x27;elite! Par <span class="hljs-keyword">la</span> suite, elle couvre lexpedition <span class="hljs-keyword">de</span> Suez, <span class="hljs-keyword">la</span> guerre <span class="hljs-keyword">des</span> Six Jours et <span class="hljs-keyword">la</span> guerre du Viet Nam. Elle prend position <span class="hljs-keyword">en</span> faveur <span class="hljs-keyword">d</span>&#x27;une autonomie du journalisme dans le service public ce <span class="hljs-keyword">qui</span> lui vaut <span class="hljs-keyword">d</span>&#x27;etre licenciee <span class="hljs-keyword">de</span> <span class="hljs-keyword">l</span>&#x27;ORTF.Elle ecrit plusieurs livres et temoigne <span class="hljs-keyword">de</span> <span class="hljs-keyword">l</span>&#x27;engagement <span class="hljs-keyword">des</span> femmes dans <span class="hljs-keyword">la</span> Resistance.</code></pre><p>There is another hidden message, indeed on the “message-secret.html” page we can see that some characters are in bold :</p><p><img src="/img/articles/challbrigittefriang/caesar-bold.png" alt="bold characters caesar"><br>We got this word:<br><code>/joha</code><br>And, of course we have to use caesar encryption on it such as on the whole text. And we got <code>/chat</code>.</p><h2 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h2><p>Completing the domain with that location, (<code>challengecybersec.fr/chat</code>), opens something like a chatroom :</p><p><img src="/img/articles/challbrigittefriang/chatr1.png" alt="Agent 042"></p><p>There are messages with other people, such as “Armand Richelieu”, “Antoine Rossignol” or “Jérémy Nitel”.<br><img src="/img/articles/challbrigittefriang/chatr2.png" alt="Messages"></p><p>From here we can choose one of the paths to get an entrance ticket.<br>But that, I didn’t know it yet. That was the easy part.</p><p>I tried to go through all the paths, but I only had the time to do two of them.</p><h2 id="Antoine-Rossignol-Cryptography"><a href="#Antoine-Rossignol-Cryptography" class="headerlink" title="Antoine Rossignol - Cryptography"></a>Antoine Rossignol - Cryptography</h2><p>Let’s begin with Antoine Rossignol’s cryptography challenge.</p><p>Antoine Rossignol provided me some text files, encrypted files and pdf’s.<br>I have to discorver what’s inside “archive_chiffree”.</p><p>The conversation:</p><pre><code class="hljs apache"><span class="hljs-attribute">Antoine</span> Rossignol <span class="hljs-number">29</span>/<span class="hljs-number">09</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot;Un des nos agents a intercepté du matériel de chiffrement et un message chiffré émis par Evil Chems qui doit contenir des informations capitales sur la livraison de produits chimiques.&quot;</span><span class="hljs-attribute">Agent</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span>/<span class="hljs-number">09</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot;OK, on s&#x27;occupe de démonter le matériel pour analyse.&quot;</span><span class="hljs-attribute">Agent</span> <span class="hljs-number">40</span> <span class="hljs-number">08</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot;C&#x27;est plus compliqué que prévu! Le processeur ne fait qu&#x27;échanger des données avec un circuit intégré dédié (ASIC). On suppose qu&#x27;il contient l&#x27;algorithme de chiffrement et que la clé y est stockée en dur.&quot;</span><span class="hljs-attribute">Antoine</span> Rossignol <span class="hljs-number">08</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot; Envoyez en urgence l&#x27;ASIC à Eve Descartes d&#x27;ESIEE-Paris pour une rétro-conception matérielle&quot;</span><span class="hljs-attribute">Agent</span> <span class="hljs-number">40</span> <span class="hljs-number">12</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot;Eve Descartes a bien reçu le circuit. Elle s&#x27;en occupe en priorité.&quot;</span><span class="hljs-attribute">Antoine</span> Rossignol <span class="hljs-number">23</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2020</span> : <span class="hljs-string">&quot;Voici le compte-rendu d&#x27;Eve avec la cartographie de la zone étudiée. Il devient urgent de déchiffrer le message.&quot;</span></code></pre><p>As I said I was given two PDF files, but Layout.pdf was protected with a password.<br>And here’s the other one:<br><img src="/img/articles/challbrigittefriang/Eve_Letter.png" alt="Eve Letter"></p><p>The most important informations were that theyachieved to do some hardware reverse engineering on the microchip. There semm to be two different areas, one which we can’t see which is probably the encryption key, and the other one should be the algorithm for that key, which we can see.<br>The algorithm is probably a <strong>well known</strong> standard encryption method.<br>They detected <strong>256</strong> programmable <strong>eFuses</strong>.<br>And they aren’t sure about the bit order and the MSB position.<br>Eve also said that we can contact her if we have an issue.</p><p>She didn’t send me the password. So I called Her.<br>Also, sending her an email tells us to call her.<br><img src="/img/articles/challbrigittefriang/Eve_Letter_Contact.png" alt="Eve Contact"></p><p>And the answer was some morse :<br><audio controls src="/res/Morse Brigitte.mp3"></audio><br>Which gives me <code>.-. . ... .. ... - .- -. -.-. .</code><br>The first letter wasn’t audible, but I found out that the passwod was <code>resistance</code>.<br><img src="/img/articles/challbrigittefriang/Eve_Morse.png" alt="Eve Morse"></p><p>In the protected PDF we can see that picture:<br><img src="/img/articles/challbrigittefriang/eFuses.png" alt="eFuses"><br>Which are clearly looking like fuses. Remember, eFuses !<br>There are exactly 256.</p><blockquote><p>In computing, eFuse is a technology invented by IBM which allows for the dynamic real-time reprogramming of computer chips. In the abstract, computer logic is generally “etched” or “hard-coded” onto a chip and cannot be changed after the chip has finished being manufactured. - Wikipedia </p></blockquote><p>I  immediately thought about binary when I saw that<br><img src="/img/articles/challbrigittefriang/eFuses2.png" alt="eFuses"><br>I thought that <code>0</code> was for cutted fuse and <code>1</code> for non-cutted. That gave me this : </p><pre><code class="hljs angelscript"><span class="hljs-number">1011111010111010101011001101111111001101110010101100100111011111101110101011110010111101110111111101111111011111110111111101111111011111110111111101111111011111110111111101111111011111110111111101111111011111110111111101111111011111110111111101111111011111</span></code></pre><p>But I had to flip the bits, to get something like this :</p><pre><code class="hljs angelscript"><span class="hljs-number">010000010100010101010011001000000110010001101010011011000100000010001010100001101000010001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000</span></code></pre><p>Which means<br><code>AES 256 ECB                     </code><br><img src="/img/articles/challbrigittefriang/eFuse_Binary.png" alt="eFuses"><br><code> Notice the lenght, it&#39;s very important</code></p><p>Now, I have all the informations to decrypt the file.<br>On <a href="https://gchq.github.io/CyberChef/">cyberchef</a> I used the following parameters:<br>KEY(utf8): AES 256 ECB                      (notice the spaces, the key have to be 32 bytes long)<br>IV: Nothing<br>Mode: ECB<br>Input: Raw<br>Output: Raw<br>GCM Tag: Nothing<br><img src="/img/articles/challbrigittefriang/AES_Descrypt.png" alt="AES Decrypt"></p><p>On my first try I copy/pasted the file content into cyberchef. But it didn’t work so I opened the file as input.<br>And then I got an output:<br><img src="/img/articles/challbrigittefriang/AES_Result.png" alt="AES Result"></p><p>This is a ZIP file, so I saved the output to a file with the .zip extension.<br>And here it is :<br><img src="/img/articles/challbrigittefriang/AES_ZIP.png" alt="AES ZIP"></p><p>There is a password protected PDF and a message from Evil Chems<br><img src="/img/articles/challbrigittefriang/Maths.png" alt="Maths"><br>Oh god… it probably means that I have to do maths…<br>(Yeah, cryptography)</p><p>After I watched nearly one hour of math videos about congruence, and I finally discovered how it works.<br>And I used dcode’s modular equation calculator to do it with big numbers.<br><a href="https://www.dcode.fr/modular-equation-solver">https://www.dcode.fr/modular-equation-solver</a></p><p>x  573[8387] (Result is x = 5622)<br>x  98[9613] (Results are x = 5622 OR x = 5964 OR x = 7640)<br>x  2726[7927] (Results are x = 2589 OR x = 5622 OR x = 7643)</p><p>The result 5622 appears each time, so I can assume that this is the password. And it was.<br>The password for the protected PDF was 5622.</p><p>Now we have this message:<br><img src="/img/articles/challbrigittefriang/instructions1.png" alt="Instructions 2"><br>And.. yeah, maths, again.</p><p>This time, what is used is called Galois Field (<code>GF(256)</code>), also called finite field.<br>I won’t go into the details, because I could make a lot of mistakes…<br>Howewer, this is widely used in cryptography and all I can say, is that this is used by AES encryption.</p><p>We also have a encrypted password (<code>0xAF3A5E20A63AD0</code>), this password has 7 bytes (<code>AF 3A 5E 20 A6 3A D0</code>) and when I convert that with a multiplicative inverse table, it gives me something like this:</p><p><code>62 20 61 3A 65 20 7A</code><br>Here’s the table I used:</p><center><table border><tr><th colspan=18>Table of multiplicative inverses: rs*inv(rs) = 01</th></tr><tr><th colspan=2 rowspan=2>inv(rs)</th><th colspan=16>s</th></tr><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr><tr><th rowspan=17>r</th></tr><tr><th>&nbsp;0&nbsp;</th><td>&nbsp;XX&nbsp;</td><td>&nbsp;01&nbsp;</td><td>&nbsp;8d&nbsp;</td><td>&nbsp;f6&nbsp;</td><td>&nbsp;cb&nbsp;</td><td>&nbsp;52&nbsp;</td><td>&nbsp;7b&nbsp;</td><td>&nbsp;d1&nbsp;</td><td>&nbsp;e8&nbsp;</td><td>&nbsp;4f&nbsp;</td><td>&nbsp;29&nbsp;</td><td>&nbsp;c0&nbsp;</td><td>&nbsp;b0&nbsp;</td><td>&nbsp;e1&nbsp;</td><td>&nbsp;e5&nbsp;</td><td>&nbsp;c7&nbsp;</td></tr><tr><th>&nbsp;1&nbsp;</th><td>&nbsp;74&nbsp;</td><td>&nbsp;b4&nbsp;</td><td>&nbsp;aa&nbsp;</td><td>&nbsp;4b&nbsp;</td><td>&nbsp;99&nbsp;</td><td>&nbsp;2b&nbsp;</td><td>&nbsp;60&nbsp;</td><td>&nbsp;5f&nbsp;</td><td>&nbsp;58&nbsp;</td><td>&nbsp;3f&nbsp;</td><td>&nbsp;fd&nbsp;</td><td>&nbsp;cc&nbsp;</td><td>&nbsp;ff&nbsp;</td><td>&nbsp;40&nbsp;</td><td>&nbsp;ee&nbsp;</td><td>&nbsp;b2&nbsp;</td></tr><tr><th>&nbsp;2&nbsp;</th><td>&nbsp;3a&nbsp;</td><td>&nbsp;6e&nbsp;</td><td>&nbsp;5a&nbsp;</td><td>&nbsp;f1&nbsp;</td><td>&nbsp;55&nbsp;</td><td>&nbsp;4d&nbsp;</td><td>&nbsp;a8&nbsp;</td><td>&nbsp;c9&nbsp;</td><td>&nbsp;c1&nbsp;</td><td>&nbsp;0a&nbsp;</td><td>&nbsp;98&nbsp;</td><td>&nbsp;15&nbsp;</td><td>&nbsp;30&nbsp;</td><td>&nbsp;44&nbsp;</td><td>&nbsp;a2&nbsp;</td><td>&nbsp;c2&nbsp;</td></tr><tr><th>&nbsp;3&nbsp;</th><td>&nbsp;2c&nbsp;</td><td>&nbsp;45&nbsp;</td><td>&nbsp;92&nbsp;</td><td>&nbsp;6c&nbsp;</td><td>&nbsp;f3&nbsp;</td><td>&nbsp;39&nbsp;</td><td>&nbsp;66&nbsp;</td><td>&nbsp;42&nbsp;</td><td>&nbsp;f2&nbsp;</td><td>&nbsp;35&nbsp;</td><td>&nbsp;20&nbsp;</td><td>&nbsp;6f&nbsp;</td><td>&nbsp;77&nbsp;</td><td>&nbsp;bb&nbsp;</td><td>&nbsp;59&nbsp;</td><td>&nbsp;19&nbsp;</td></tr><tr><th>&nbsp;4&nbsp;</th><td>&nbsp;1d&nbsp;</td><td>&nbsp;fe&nbsp;</td><td>&nbsp;37&nbsp;</td><td>&nbsp;67&nbsp;</td><td>&nbsp;2d&nbsp;</td><td>&nbsp;31&nbsp;</td><td>&nbsp;f5&nbsp;</td><td>&nbsp;69&nbsp;</td><td>&nbsp;a7&nbsp;</td><td>&nbsp;64&nbsp;</td><td>&nbsp;ab&nbsp;</td><td>&nbsp;13&nbsp;</td><td>&nbsp;54&nbsp;</td><td>&nbsp;25&nbsp;</td><td>&nbsp;e9&nbsp;</td><td>&nbsp;09&nbsp;</td></tr><tr><th>&nbsp;5&nbsp;</th><td>&nbsp;ed&nbsp;</td><td>&nbsp;5c&nbsp;</td><td>&nbsp;05&nbsp;</td><td>&nbsp;ca&nbsp;</td><td>&nbsp;4c&nbsp;</td><td>&nbsp;24&nbsp;</td><td>&nbsp;87&nbsp;</td><td>&nbsp;bf&nbsp;</td><td>&nbsp;18&nbsp;</td><td>&nbsp;3e&nbsp;</td><td>&nbsp;22&nbsp;</td><td>&nbsp;f0&nbsp;</td><td>&nbsp;51&nbsp;</td><td>&nbsp;ec&nbsp;</td><td>&nbsp;61&nbsp;</td><td>&nbsp;17&nbsp;</td></tr><tr><th>&nbsp;6&nbsp;</th><td>&nbsp;16&nbsp;</td><td>&nbsp;5e&nbsp;</td><td>&nbsp;af&nbsp;</td><td>&nbsp;d3&nbsp;</td><td>&nbsp;49&nbsp;</td><td>&nbsp;a6&nbsp;</td><td>&nbsp;36&nbsp;</td><td>&nbsp;43&nbsp;</td><td>&nbsp;f4&nbsp;</td><td>&nbsp;47&nbsp;</td><td>&nbsp;91&nbsp;</td><td>&nbsp;df&nbsp;</td><td>&nbsp;33&nbsp;</td><td>&nbsp;93&nbsp;</td><td>&nbsp;21&nbsp;</td><td>&nbsp;3b&nbsp;</td></tr><tr><th>&nbsp;7&nbsp;</th><td>&nbsp;79&nbsp;</td><td>&nbsp;b7&nbsp;</td><td>&nbsp;97&nbsp;</td><td>&nbsp;85&nbsp;</td><td>&nbsp;10&nbsp;</td><td>&nbsp;b5&nbsp;</td><td>&nbsp;ba&nbsp;</td><td>&nbsp;3c&nbsp;</td><td>&nbsp;b6&nbsp;</td><td>&nbsp;70&nbsp;</td><td>&nbsp;d0&nbsp;</td><td>&nbsp;06&nbsp;</td><td>&nbsp;a1&nbsp;</td><td>&nbsp;fa&nbsp;</td><td>&nbsp;81&nbsp;</td><td>&nbsp;82&nbsp;</td></tr><tr><th>&nbsp;8&nbsp;</th><td>&nbsp;83&nbsp;</td><td>&nbsp;7e&nbsp;</td><td>&nbsp;7f&nbsp;</td><td>&nbsp;80&nbsp;</td><td>&nbsp;96&nbsp;</td><td>&nbsp;73&nbsp;</td><td>&nbsp;be&nbsp;</td><td>&nbsp;56&nbsp;</td><td>&nbsp;9b&nbsp;</td><td>&nbsp;9e&nbsp;</td><td>&nbsp;95&nbsp;</td><td>&nbsp;d9&nbsp;</td><td>&nbsp;f7&nbsp;</td><td>&nbsp;02&nbsp;</td><td>&nbsp;b9&nbsp;</td><td>&nbsp;a4&nbsp;</td></tr><tr><th>&nbsp;9&nbsp;</th><td>&nbsp;de&nbsp;</td><td>&nbsp;6a&nbsp;</td><td>&nbsp;32&nbsp;</td><td>&nbsp;6d&nbsp;</td><td>&nbsp;d8&nbsp;</td><td>&nbsp;8a&nbsp;</td><td>&nbsp;84&nbsp;</td><td>&nbsp;72&nbsp;</td><td>&nbsp;2a&nbsp;</td><td>&nbsp;14&nbsp;</td><td>&nbsp;9f&nbsp;</td><td>&nbsp;88&nbsp;</td><td>&nbsp;f9&nbsp;</td><td>&nbsp;dc&nbsp;</td><td>&nbsp;89&nbsp;</td><td>&nbsp;9a&nbsp;</td></tr><tr><th>&nbsp;a&nbsp;</th><td>&nbsp;fb&nbsp;</td><td>&nbsp;7c&nbsp;</td><td>&nbsp;2e&nbsp;</td><td>&nbsp;c3&nbsp;</td><td>&nbsp;8f&nbsp;</td><td>&nbsp;b8&nbsp;</td><td>&nbsp;65&nbsp;</td><td>&nbsp;48&nbsp;</td><td>&nbsp;26&nbsp;</td><td>&nbsp;c8&nbsp;</td><td>&nbsp;12&nbsp;</td><td>&nbsp;4a&nbsp;</td><td>&nbsp;ce&nbsp;</td><td>&nbsp;e7&nbsp;</td><td>&nbsp;d2&nbsp;</td><td>&nbsp;62&nbsp;</td></tr><tr><th>&nbsp;b&nbsp;</th><td>&nbsp;0c&nbsp;</td><td>&nbsp;e0&nbsp;</td><td>&nbsp;1f&nbsp;</td><td>&nbsp;ef&nbsp;</td><td>&nbsp;11&nbsp;</td><td>&nbsp;75&nbsp;</td><td>&nbsp;78&nbsp;</td><td>&nbsp;71&nbsp;</td><td>&nbsp;a5&nbsp;</td><td>&nbsp;8e&nbsp;</td><td>&nbsp;76&nbsp;</td><td>&nbsp;3d&nbsp;</td><td>&nbsp;bd&nbsp;</td><td>&nbsp;bc&nbsp;</td><td>&nbsp;86&nbsp;</td><td>&nbsp;57&nbsp;</td></tr><tr><th>&nbsp;c&nbsp;</th><td>&nbsp;0b&nbsp;</td><td>&nbsp;28&nbsp;</td><td>&nbsp;2f&nbsp;</td><td>&nbsp;a3&nbsp;</td><td>&nbsp;da&nbsp;</td><td>&nbsp;d4&nbsp;</td><td>&nbsp;e4&nbsp;</td><td>&nbsp;0f&nbsp;</td><td>&nbsp;a9&nbsp;</td><td>&nbsp;27&nbsp;</td><td>&nbsp;53&nbsp;</td><td>&nbsp;04&nbsp;</td><td>&nbsp;1b&nbsp;</td><td>&nbsp;fc&nbsp;</td><td>&nbsp;ac&nbsp;</td><td>&nbsp;e6&nbsp;</td></tr><tr><th>&nbsp;d&nbsp;</th><td>&nbsp;7a&nbsp;</td><td>&nbsp;07&nbsp;</td><td>&nbsp;ae&nbsp;</td><td>&nbsp;63&nbsp;</td><td>&nbsp;c5&nbsp;</td><td>&nbsp;db&nbsp;</td><td>&nbsp;e2&nbsp;</td><td>&nbsp;ea&nbsp;</td><td>&nbsp;94&nbsp;</td><td>&nbsp;8b&nbsp;</td><td>&nbsp;c4&nbsp;</td><td>&nbsp;d5&nbsp;</td><td>&nbsp;9d&nbsp;</td><td>&nbsp;f8&nbsp;</td><td>&nbsp;90&nbsp;</td><td>&nbsp;6b&nbsp;</td></tr><tr><th>&nbsp;e&nbsp;</th><td>&nbsp;b1&nbsp;</td><td>&nbsp;0d&nbsp;</td><td>&nbsp;d6&nbsp;</td><td>&nbsp;eb&nbsp;</td><td>&nbsp;c6&nbsp;</td><td>&nbsp;0e&nbsp;</td><td>&nbsp;cf&nbsp;</td><td>&nbsp;ad&nbsp;</td><td>&nbsp;08&nbsp;</td><td>&nbsp;4e&nbsp;</td><td>&nbsp;d7&nbsp;</td><td>&nbsp;e3&nbsp;</td><td>&nbsp;5d&nbsp;</td><td>&nbsp;50&nbsp;</td><td>&nbsp;1e&nbsp;</td><td>&nbsp;b3&nbsp;</td></tr><tr><th>&nbsp;f&nbsp;</th><td>&nbsp;5b&nbsp;</td><td>&nbsp;23&nbsp;</td><td>&nbsp;38&nbsp;</td><td>&nbsp;34&nbsp;</td><td>&nbsp;68&nbsp;</td><td>&nbsp;46&nbsp;</td><td>&nbsp;03&nbsp;</td><td>&nbsp;8c&nbsp;</td><td>&nbsp;dd&nbsp;</td><td>&nbsp;9c&nbsp;</td><td>&nbsp;7d&nbsp;</td><td>&nbsp;a0&nbsp;</td><td>&nbsp;cd&nbsp;</td><td>&nbsp;1a&nbsp;</td><td>&nbsp;41&nbsp;</td><td>&nbsp;1c&nbsp;</td></tr></table></center>Source: http://www.cs.utsa.edu/~wagner/laws/FFM.html<p>Here’s an example for the first byte, how I found its multiplicative inverse:<br><img src="/img/articles/challbrigittefriang/multi_inverse.png" alt="Multiplicative Inverse Example"></p><p>Now I have to decode these bytes to ASCII:<br>62 -&gt; b<br>20 -&gt; space<br>61 -&gt; a<br>3A -&gt; :<br>65 -&gt; e<br>20 -&gt; space<br>7A -&gt; z<br>The password seemed to be <code>b a:e z</code> so I sent that to Antoine Rossignol.<br><img src="/img/articles/challbrigittefriang/response2.png" alt="Response"><br>And I was correct !</p><p>And this directory is the final step to access the real CTF.<br>And that’s how I got my second entry ticket !</p><h2 id="Jeremy-Nitel-Web"><a href="#Jeremy-Nitel-Web" class="headerlink" title="Jeremy Nitel - Web"></a>Jeremy Nitel - Web</h2><p>This time I’m gonna attack the web challenge.</p><p>Stockos, a storage service is suspected to be a transit point for ware linked to a massacre of resistance fighters.<br>And apparently the credentials are extremely weak.<br><img src="/img/articles/challbrigittefriang/stockos_main.png" alt="Stockos login page"><br> So, I tried <code>admin:admin</code> and I was in.</p><p>I had to perform an SQL injection on the stock page.<br><img src="/img/articles/challbrigittefriang/stockos_stocks.png" alt="Stockos stocks"></p><p>With this SQL command I could find Evil Gouv’s email address<br><code>1&#39; UNION SELECT id, name, email, 1, 1 FROM stockos.customer #</code><br>I learned a lot about SQL injections with this.<br>Which is <img src="/img/articles/challbrigittefriang/stockos_email.png" alt="Stockos eMail"><br><code>agent.malice@secret.evil.gov.ev</code></p><p>Then it was told me to book a flight on evil air’s website:<br><a href="https://www.challengecybersec.fr/35e334a1ef338faf064da9eb5f861d3c/">https://www.challengecybersec.fr/35e334a1ef338faf064da9eb5f861d3c/</a><br><img src="/img/articles/challbrigittefriang/evilair_main.png" alt="EvilAir Homepage"></p><p>The flight is called ABDJI6<br>And it have to be from 26/10/2020 to 28/10/2020<br>From Bad City to Evil City<br>And… I should think about taking sunscreen, because the sun is beating down there.. hmm<br>Probably because it’s evil.</p><p>I created an account (I was warned to not use my usual credentials, and use a tempmail), with these informations:<br>name: ninja<br>mail: <a href="mailto:&#x6e;&#x69;&#x6e;&#x6a;&#97;&#64;&#110;&#x69;&#110;&#x6a;&#97;&#109;&#97;&#x69;&#x6c;&#x2e;&#x78;&#121;&#122;">&#x6e;&#x69;&#x6e;&#x6a;&#97;&#64;&#110;&#x69;&#110;&#x6a;&#97;&#109;&#97;&#x69;&#x6c;&#x2e;&#x78;&#121;&#122;</a><br>password: BFSRpx!4E…</p><p>Here’s the confirmation email they send me:<br><img src="/img/articles/challbrigittefriang/evilair_mail.png" alt="EvilAir confirmation email"></p><blockquote><p>Prêt à voyager au pays des merveilles ?<br>Activez vôtre compte dès maintenant !<br><a href="http://challengecybersec.fr/35e334a1ef338faf064da9eb5f861d3c/activate/bmluamFAbmluamFtYWlsLnh5eg==">http://challengecybersec.fr/35e334a1ef338faf064da9eb5f861d3c/activate/bmluamFAbmluamFtYWlsLnh5eg==</a><br>Vous avez jusqu’à Tue Nov 03 2020 04:36:50 GMT+0000 (Coordinated Universal Time) le faire</p></blockquote><p>Looks like a phishing mail lol:<br><img src="/img/articles/challbrigittefriang/evilphish.png" alt="evilphish"><br><img src="/img/articles/challbrigittefriang/evilphish2.png" alt="evilphish"></p><p>Anyway,<br>The generated link basically just activated my account.<br>And the base64 is the email address I used, encoded in base64.<br><em>hmmm</em></p><p>Okay, let’s book that flight.</p><p><img src="/img/articles/challbrigittefriang/evilair_book_fail.png" alt="EvilAir booking"><br>(I wanted a flight in business class, but unfortunately they didn’t take it into consideration…)</p><p>And I couldn’t book that destination.<br><img src="/img/articles/challbrigittefriang/evilair_book_fail2.png" alt="evilair fail 2"><br>On my profile page they said that I don’t have an “Authorized profile”<br><img src="/img/articles/challbrigittefriang/evilair_unauthorized_profile.png" alt="evilair unauthorized"></p><p>That’s not nice… let’s see the cookies.<br><img src="/img/articles/challbrigittefriang/evilair_cookie.png" alt="evilair cookies"><br>Nothing really interesting.</p><p>Okay, then I thought I had to extract the password from agent.malice<br>Because they warned me that the informations are in clear in the database.<br>But I found nothing.</p><p>Then, I decided to use the password recovery function of the website. They send me a recovery link, which contains my email in base64.<br>This is very similar to the activation link.<br><img src="/img/articles/challbrigittefriang/evilair_mail2.png" alt="Evil air activation mail"><br>And, this link gives me my password in clear text<br><img src="/img/articles/challbrigittefriang/evilair_passreset.png" alt="evilair password clear"></p><p>I tried to do the same thing with agent malice’s email address, I converted his email to base64 and replaced my token with that.<br>And it shows up the following password:<br>Superlongpassword666</p><p>I’m now authorized :<br><img src="/img/articles/challbrigittefriang/evilair_ticket_qr.png" alt="EvilAir Ticket"></p><p>And I can see my flight at “bookings”<br><img src="/img/articles/challbrigittefriang/evilphish.png" alt="evilphish"><br>The QR Code gives me the flag:<br>DGSESIEE{2cd992f9b2319860ce3a35db6673a9b8}</p><p>And when I send it to Jérémy, he gave me another mission.<br><img src="/img/articles/challbrigittefriang/web_flag.png" alt="Web Flag"></p><p>In this one I have to find a hidden communication, inside the pcap file.<br>And I found out that the messages are TLS encrypted.<br><img src="/img/articles/challbrigittefriang/trammes-ws.png" alt="Wireshark Packets"></p><p>I extracted the certificate from the handshake, and used <a href="https://github.com/Ganapati/RsaCtfTool">Ganapati’s RsaCtfTool</a> to get the private key.<br>This is working because the public key of the certificate (RSA key) is weak.</p><p>Wireshark is configurable to decrypt SSL when we give him a private key.<br>This is pretty easy. Go to <code>&#39;Edit&#39; -&gt; &#39;Preferences&#39;</code><br><img src="/img/articles/challbrigittefriang/ws_add_key.png" alt="Add key"><br>And in the ‘protocol’ section, find ‘TLS’ or ‘SSL’<br><img src="/img/articles/challbrigittefriang/ws_add_key2.png" alt="Add key"><br>And import the private key<br><img src="/img/articles/challbrigittefriang/ws_add_key3.png" alt="Add key"></p><p>Victory is near.</p><p>I had to find the most relevant message (it was in red)<br><img src="/img/articles/challbrigittefriang/trammes-ws2.png" alt="Wireshark packets"><br>And get the TLS decrypted content :<br><img src="/img/articles/challbrigittefriang/ws_decrypted.png" alt="TLS Decrypted Message"></p><blockquote><p>OST /7a144cdc500b28e80cf760d60aca2ed3 HTTP/1.1<br>Host: 192.168.29.7<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: en-US,en;q=0.5<br>Accept-Encoding: gzip, deflate, br<br>Referer: <a href="https://192.168.29.7/">https://192.168.29.7/</a><br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 13<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>password=test</p></blockquote><p>And there’s a hash, which looks like the previous directories we had.<br>Let’s put that after the URL:<br><img src="/img/articles/challbrigittefriang/coros_ctf.png" alt="Coros CTF entry page"><br>And that’s how I got my entry ticket to the CTF !</p><h2 id="Blaise-Pascal-Algorithms"><a href="#Blaise-Pascal-Algorithms" class="headerlink" title="Blaise Pascal - Algorithms"></a>Blaise Pascal - Algorithms</h2><p>I didn’t complete this challenge, but I wanna show you the first part.</p><p>Two files were given to me, an original, and an intercepted file, which is supposed to contain a hidden message.</p><p>the first thing we can see by comparing these two files is that, indeed, there are some additionnal characters in the intercepted file.<br>Original:<br><img src="/img/articles/challbrigittefriang/pascal_original.png" alt="original file"></p><p>Intercepted:<br><img src="/img/articles/challbrigittefriang/pascal_intercepted.png" alt="intercepted file"></p><p>These files contain about 311762 characters, for the lightest, so i’m not gonna comapre them by hand.<br>So I created a python script :</p><pre><code class="hljs python"><span class="hljs-comment"># Import array, to use arrays</span><span class="hljs-keyword">from</span> array <span class="hljs-keyword">import</span> array<span class="hljs-comment"># Open two files to compare</span>original = open(<span class="hljs-string">&quot;C:\\Users\\Cookie\\Downloads\\original.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)intercepte = open(<span class="hljs-string">&quot;C:\\Users\\Cookie\\Downloads\\intercepte.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-comment"># Create two byte arrays </span>x_original = array(<span class="hljs-string">&#x27;b&#x27;</span>)x_intercepte = array(<span class="hljs-string">&#x27;b&#x27;</span>)x_result = array(<span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-comment"># Assign a file to each byte array</span>x_original.frombytes(original.read().encode())x_intercepte.frombytes(intercepte.read().encode())<span class="hljs-comment"># Check each item in arrays, and compare them one by one</span>f = open(<span class="hljs-string">&quot;C:\\Users\\Cookie\\Downloads\\x_result_algo.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<span class="hljs-comment"># For each character in the intercepted file, write extra caracter to file and delete it</span><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(len(x_intercepte)):    <span class="hljs-keyword">while</span> x_intercepte[c]!= x_original[c]:        f.write(chr(x_intercepte[c]))        x_intercepte.pop(c)<span class="hljs-comment"># Close the file</span>f.close()<span class="hljs-comment"># This script will end with a &#x27;array index out of range&#x27; error, this is completely normal</span></code></pre><p>I had a lot of issues with this, but finally everything is fine.<br>Some corrupted images I had :<br><img src="/img/articles/challbrigittefriang/pascal_script_fail.png" alt="Corrupted 1"><br><img src="/img/articles/challbrigittefriang/pascal_script_fail2.png" alt="Corrupted 2"><br>(This one looks especially evil)</p><p>The result file contains base 64:<br><img src="/img/articles/challbrigittefriang/pascal_base64.png" alt="Base64"></p><p>Which is an base64 encoded image:<br><img src="/img/articles/challbrigittefriang/pascal_picture.png" alt="Good picture"></p><p>I that directory was a new webpage<br><img src="/img/articles/challbrigittefriang/pascal_4files.png" alt="New webpage"></p><p>And I stopped that challenge here.</p><h2 id="Alphonse-Bertillon-Forensics"><a href="#Alphonse-Bertillon-Forensics" class="headerlink" title="Alphonse Bertillon - Forensics"></a>Alphonse Bertillon - Forensics</h2><p>An nginx log file was given to me.<br>And I had to find what the attackers IP is, he achieved to connect to the website, that’s all I knew.<br>So, i serched for multiple connection attempts, HTTP connection errors (such as 401)<br>But finally, it was in the user agent. The attacker used a browser called “Evil Browser”:<br><img src="/img/articles/challbrigittefriang/evil_browser.png" alt="Evil Browser"><br>Here’s his IP address:<br><code>179.97.58.61</code></p><p>Once given to Alphonse Bertillon, he gave me another file.<br><img src="/img/articles/challbrigittefriang/forensics_respnse.png" alt="Alphonse response"></p><p>Apparently there can be malwares hidden into that file.<br>This file was an 303Mo heavy jpg image. But the picture quality is really poor.<br>So I simply used binwalk to see if theres anything uncommon. And yeah, indeed :<br><img src="/img/articles/challbrigittefriang/forensics_binwalk.png" alt="binwalk"></p><p>So let’s use the same tool to get these files.<br><code>binwalk -e evil_country_landscape.jpg</code></p><p>I got 7 files,<br><img src="/img/articles/challbrigittefriang/forensics.png" alt="forensics terminal"></p><p>And I had not a Windows Virtual Machine at this moment, so this is where I left.</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>CTF</tag>
      
      <tag>challengecybersecfr</tag>
      
      <tag>DGSE</tag>
      
      <tag>ESIEE</tag>
      
    </tags>
    
  </entry>
  
  
  
 
  
  
  
  <entry>
    <title>Cicada-3301 Vol.1 TryHackMe Writeup</title>
    <link href="/2020/10/01/Cicada-3301-Vol-1-TryHackMe-Writeup/"/>
    <url>/2020/10/01/Cicada-3301-Vol-1-TryHackMe-Writeup/</url>
    
    <content type="html"><![CDATA[<p>From <a href="https://tryhackme.com/room/cicada3301vol1">TryHackMe Cicada-3301 vol:1</a></p><h2 id="Cicada-3301-Vol-1"><a href="#Cicada-3301-Vol-1" class="headerlink" title="Cicada-3301 Vol.1  "></a>Cicada-3301 Vol.1  </h2><p>I had two files to solve this challenge, an .wav audio file and a .jpg picture.<br>The indications were “Use Sonic Visualizer to analyze the audio”. But using an online spectrum analyzer is easier for me.<br>So I used decode’s spectrum analyzer but… it uses a logarithmic frequency scaling.<br>So, I decided to use Audacity, because no one of the tools on the internet worked (Yes, Sonic Visualizer vas recomended, I know…).</p><p><img src="/img/articles/cicada3301vol1/cicada_qrcode.png" alt="Cicada-3301 QR Code" title="Cicada-3301 QR Code"></p><p><span class="caption text-muted">(Audacity-&gt;Sprectrogram-&gt;linear-&gt;adaptative zoom)</span>  </p><h2 id="A-Pastebin"><a href="#A-Pastebin" class="headerlink" title="A Pastebin"></a>A Pastebin</h2><p>I played a little bit with the zoom and spectrogram settings and then I could scan it with my phone, and get this link :<br><a href="https://tryhackme.com/room/cicada3301vol1">https://pastebin.com/wphxxxxx</a>  </p><p>This paste contains a passphrase and a key:</p><blockquote><p>Passphrase: SG01Ul8K——–2<br>Key: Q2ljYWRh</p></blockquote><p>The first thing I tried was decode it from base64, and I was right. Now I have this :  </p><blockquote><p>Passphrase: Hm5R_4_——–!<br>Key: Cicada</p></blockquote><p>But I have to decode that passphrase, with that key (that’s what I thought… ).<br>I tried a lot of Vigenere cipher decode tools online, but I had nothing interesting.<br>And… why not encode the passphrase with the key ? Indeed, that’s what I had to do.<br>Now I have the “final passphrase” :  </p><blockquote><p>Ju5T_4_——–!</p></blockquote><p>Now it’s time to work with that picture I had at the beginning.<br><img src="/img/articles/cicada3301vol1/cicada001.png" alt="Cicada-3301 Message" title="Cicada 3301 message"></p><p>It will be easier, I thought…  </p><p>First of all, check the exif data.<br>Nothing.<br>Then I opened it with Notepad++ and I saw that the picture has a strange ending, so I tried to extract something from it with steghide, and why not use that passphrase from the audio file ?  </p><p><img src="/img/articles/cicada3301vol1/cicada_steghide.png" alt="Cicada-3301 Steghide" title="Steghide result"></p><h2 id="The-invitation"><a href="#The-invitation" class="headerlink" title="The invitation"></a>The invitation</h2><p>Allright, now I have a text file, it is an Invitation !  </p><p><img src="/img/articles/cicada3301vol1/cicada_invitation.png" alt="Cicada-3301 Invitation" title="The Invitation"></p><p>With another link insite, it was a link to a picture on imgur.  </p><p>After download, I did the same checks as before. But this time I don’t have any passphrase anymore. I searched the tool used in the original cicada challenge as mentionned in the Hint (outguess).  </p><p>As output I have another text file now.  </p><p>The hash was easy to crack, and it gave me a pastebin link to a text from an Egyptian book.</p><p><img src="/img/articles/cicada3301vol1/cicada_hash215.png" alt="Cicada-3301 Hash" title="Cicada 3301 Book Cipher"></p><p>And now it’s interesting, I never saw that before.  </p><p>We can see an “I”, for “Chapter I”, and then two other numbers.<br>This one was particularly complicated for me. I knew how to solve it, but I didnt know if the line numbers are part of the text or not, and same for special characters for example.  </p><h2 id="Book-cipher"><a href="#Book-cipher" class="headerlink" title="Book cipher"></a>Book cipher</h2><p><img src="/img/articles/cicada3301vol1/cicada_bookdecode.png" alt="Cicada-3301 Book Cipher" title="Cicada 3301 Book Cipher"></p><p>Finally, after the 5 first letters I found the pattern and I was able to solve it easily.<br>The final link redirects to a very nice SoundCloud music.  </p><iframe class="img-fluid" width="600px" height="350px" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/449096016&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"></iframe>  <p>This challenge was easy, but it is one of my favorite.</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Resources</title>
    <link href="/2020/10/01/Resources/"/>
    <url>/2020/10/01/Resources/</url>
    
    <content type="html"><![CDATA[<p>Do you want to travel to the depths of my <del>being</del> blog ?</p><p>You are welcome ! Take your legs and follow me !</p><h2 id="Artists"><a href="#Artists" class="headerlink" title="Artists"></a>Artists</h2><p>I use some images here which aren’t mine, here are the artists :</p><ul><li><a href="https://aenamiart.artstation.com/">Alena Aenami</a></li><li><a href="https://somartist.artstation.com/">Philipp A. Urlich</a></li><li><a href="https://xkheyfets.artstation.com/">Xeniya Kheyfets</a></li></ul><p>I find my images on websites like<br><a href="https://www.deviantart.com/">Deviantart</a><br><a href="https://www.artstation.com/">Artstation</a><br><a href="https://wallhaven.cc/">Wallheaven</a></p><h2 id="Comment-section"><a href="#Comment-section" class="headerlink" title="Comment section"></a>Comment section</h2><p>I use <a href="https://valine.js.org/">Valine</a> to manage my comment section.<br>I tried to install <a href="https://remark42.com/">Remark42</a> instead but… it wasn’t a really successful attempt, as you can see. But anyway, Valine has a very nice design and user interface, tell me if you like it.</p>]]></content>
    
    
    
    <tags>
      
      <tag>resources</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
